import { AnySafeMapper, SafeMapper, OutputOf, ExpectedInput, ExpectedInputOfImpl, MappableInput, MappableInputOfImpl, ExtractRunTimeModifierOrUnknown } from "../../mapper";
export declare type UnsafeOrMapper<ArrT extends AnySafeMapper[]> = (SafeMapper<OutputOf<ArrT[number]>> & ExpectedInput<ExpectedInputOfImpl<ArrT[number]>[0]> & MappableInput<MappableInputOfImpl<ArrT[number]>[0]>);
export declare function unsafeOr<ArrT extends AnySafeMapper[]>(...arr: ArrT): (UnsafeOrMapper<ArrT>);
export declare type OrMapper<F extends AnySafeMapper, ArrT extends AnySafeMapper[]> = (SafeMapper<OutputOf<F | ArrT[number]>> & ExpectedInput<ExpectedInputOfImpl<F | ArrT[number]>[0]> & MappableInput<MappableInputOfImpl<F | ArrT[number]>[0]> & ExtractRunTimeModifierOrUnknown<F>);
export declare function or<F extends AnySafeMapper, ArrT extends AnySafeMapper[]>(f: F, ...arr: ArrT): (OrMapper<F, ArrT>);
//# sourceMappingURL=or.d.ts.map