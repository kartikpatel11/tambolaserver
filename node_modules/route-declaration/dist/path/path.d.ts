import { AppendParam } from "./operation";
export declare type UnknownParam<ParamNameT extends string> = {
    [name in ParamNameT]: unknown;
};
export interface ParamPart<NameT extends string> {
    readonly name: NameT;
    readonly regex: RegExp | undefined;
}
export declare class Path<ParamNameT extends string> {
    /**
        Each element is a part of the entire path.
    */
    readonly parts: readonly (string | ParamPart<ParamNameT>)[];
    /**
        Meant for use with `express`.
        ```ts
        const app = express();
        app.get(routerPath, (req, res) => {
            //impl
        });
        ```
    */
    readonly routerPath: string;
    constructor(parts: readonly (string | ParamPart<ParamNameT>)[], routerPath: string);
    static Create(): Path<never>;
    append(part: string): Path<ParamNameT>;
    /**
        regex, if provided, ignores modifiers like `g` and `i`
    */
    appendParam<NameT extends string>(name: NameT, regex?: RegExp): AppendParam<this, NameT>;
    getCallingPath(param: UnknownParam<ParamNameT>): string;
    hasParamParts(): boolean;
    getParamParts(): ParamPart<ParamNameT>[];
}
//# sourceMappingURL=path.d.ts.map