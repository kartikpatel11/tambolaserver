"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operation_1 = require("./operation");
var Path = /** @class */ (function () {
    function Path(parts, routerPath) {
        this.parts = parts;
        this.routerPath = routerPath
            .replace(/\/{2,}/g, "/")
            .replace(/\/$/g, "");
    }
    Path.Create = function () {
        return new Path([], "");
    };
    Path.prototype.append = function (part) {
        if (part.length == 0) {
            //No change, return a copy, anyway
            return new Path(this.parts.slice(), this.routerPath);
        }
        if (part.indexOf(":") >= 0) {
            throw new Error("\":\" not allowed in part, " + part);
        }
        if (part[0] != "/") {
            throw new Error("part must start with \"/\", " + part);
        }
        if (part.length > 1 && part[part.length - 1] == "/") {
            throw new Error("part must not end with \"/\", " + part);
        }
        part = part
            .replace(/\/{2,}/g, "/")
            .replace(/\/$/g, "");
        return new Path(this.parts.concat([part]), (this.routerPath + part));
    };
    /**
        regex, if provided, ignores modifiers like `g` and `i`
    */
    Path.prototype.appendParam = function (name, regex) {
        return operation_1.appendParam(this, name, regex);
    };
    Path.prototype.getCallingPath = function (param) {
        var result = "";
        for (var _i = 0, _a = this.parts; _i < _a.length; _i++) {
            var part = _a[_i];
            if (typeof part == "string") {
                result += part;
            }
            else {
                var raw = param[part.name];
                var value = (raw instanceof Date) ?
                    raw.toJSON() :
                    String(raw);
                if (part.regex != undefined) {
                    if (!new RegExp("^" + part.regex.source + "$").test(value)) {
                        throw new Error("Invalid value for " + part.name + ", received " + value + "; expected /^" + part.regex.source + "$/");
                    }
                }
                result += "/" + encodeURIComponent(value);
            }
        }
        return result
            .replace(/\/{2,}/g, "/")
            .replace(/\/$/g, "");
    };
    Path.prototype.hasParamParts = function () {
        return this.parts.some(function (i) { return (typeof i != "string"); });
    };
    Path.prototype.getParamParts = function () {
        return this.parts.filter(function (i) { return (typeof i != "string"); });
    };
    return Path;
}());
exports.Path = Path;
//# sourceMappingURL=path.js.map