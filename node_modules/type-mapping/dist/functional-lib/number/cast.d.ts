/**
    Uses `floatingPointFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    stringToFiniteNumber("", s).toString()
    ```
*/
export declare function stringToFiniteNumber(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number>;
/**
    Uses `integerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    stringToInteger("", s).toString()
    ```
*/
export declare function stringToInteger(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number>;
/**
    Uses `unsignedIntegerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    stringToUnsignedInteger("", s).toString()
    ```
*/
export declare function stringToUnsignedInteger(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number>;
/**
    Uses `floatingPointFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toFiniteNumber("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toFiniteNumber("", b).toString()
    ```
*/
export declare function toFiniteNumber(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number | bigint>;
/**
    Uses `floatingPointFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toUnsafeNumber("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toUnsafeNumber("", b).toString()
    ```
*/
export declare function toUnsafeNumber(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number | bigint>;
/**
    Uses `integerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toInteger("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toInteger("", b).toString()
    ```
*/
export declare function toInteger(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number | bigint>;
/**
    Uses `unsignedIntegerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toUnsignedInteger("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toUnsignedInteger("", b).toString()
    ```
*/
export declare function toUnsignedInteger(): import("../..").Mapper<unknown, number> & import("../..").ExpectedInput<number> & import("../..").MappableInput<string | number | bigint>;
//# sourceMappingURL=cast.d.ts.map