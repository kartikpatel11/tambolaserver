import { AsyncRequestValueHandler, AsyncErrorValueHandler, AsyncValueHandler } from "./async-value-handler";
import { RouteData } from "../route";
import { RequestVoidHandler, ErrorVoidHandler } from "../void-handler";
export declare type RouteDataOf<HandlerT extends AsyncValueHandler<RouteData, any>> = (HandlerT extends AsyncRequestValueHandler<infer DataT, any> ? DataT : HandlerT extends AsyncErrorValueHandler<infer DataT, any> ? DataT : never);
export declare function toSafeRequestVoidHandler<HandlerT extends AsyncRequestValueHandler<any, any>>(handler: HandlerT): RequestVoidHandler<RouteDataOf<HandlerT>>;
export declare function toSafeErrorVoidHandler<HandlerT extends AsyncErrorValueHandler<any, any>>(handler: HandlerT): ErrorVoidHandler<RouteDataOf<HandlerT>>;
//# sourceMappingURL=util.d.ts.map