import { SafeMapperMap } from "../../field-map";
import { SafeMapper, OutputOf, ExpectedInput, ExpectedInputOf, MappableInput, MappableInputOf } from "../../mapper";
/**
    https://github.com/microsoft/TypeScript/issues/31992#issuecomment-503816806
    We use this no-op `_` type as a hack to get the tooltip to give
    us a "better-looking" type
*/
declare type _<T> = T;
declare type OutputType<MapT extends SafeMapperMap, K extends keyof MapT = Extract<keyof MapT, string>> = (_<{
    [name in K]: (OutputOf<MapT[name]> | undefined);
}>);
export declare type PartialObjectFromMapMapper<MapT extends SafeMapperMap> = (SafeMapper<OutputType<MapT>> & ExpectedInput<{
    [name in Extract<keyof MapT, string>]?: (ExpectedInputOf<MapT[name]> | undefined);
}> & MappableInput<{
    [name in Extract<keyof MapT, string>]?: (MappableInputOf<MapT[name]> | undefined);
}>);
/**
    Always returns a new object.

    If the input contains additional fields not part
    of the map, they will not be in the new object.

    -----

    All input fields are optional.
    All output fields may be undefined.
*/
export declare function partialObjectFromMap<MapT extends SafeMapperMap>(map: MapT): (PartialObjectFromMapMapper<MapT>);
export {};
//# sourceMappingURL=partial-object-from-map.d.ts.map