"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("../../mapper");
var operator_1 = require("../operator");
var instance_of_object_1 = require("./instance-of-object");
var string_util_1 = require("../../string-util");
var error_util_1 = require("../../error-util");
function derive(srcKey, dstKey, f) {
    /**
        Must property be explicitly set?

                        | `orUndefined` | `optional` | `runTimeRequired()`
        compile-time    | -no-effect-   | optional   | required
        run-time        | optional      | optional   | required
    */
    var runTimeRequired = mapper_1.getRunTimeRequiredFlagOrFalse(f);
    var result = operator_1.pipe(instance_of_object_1.instanceOfObject(), function (name, mixed) {
        var _a;
        if (!Object.prototype.hasOwnProperty.call(mixed, srcKey)) {
            if (runTimeRequired) {
                var expected = "object with explicitly set property " + JSON.stringify(srcKey);
                throw error_util_1.makeMappingError({
                    message: name + " must be " + expected,
                    inputName: name,
                    actualValue: mixed,
                    expected: expected,
                    expectedMeta: {
                        srcKey: srcKey,
                        dstKey: dstKey,
                    },
                    propertyErrors: [
                        error_util_1.makeMappingError({
                            message: "" + name + string_util_1.toPropertyAccess(srcKey) + " must be explicitly set",
                            inputName: "" + name + string_util_1.toPropertyAccess(srcKey),
                            actualValue: undefined,
                            expected: "explicitly set",
                        }),
                    ],
                });
            }
        }
        var dstResult = mapper_1.tryMapHandled(f, "" + name + string_util_1.toPropertyAccess(srcKey), mixed[srcKey]);
        if (dstResult.success) {
            var obj = (_a = {},
                _a[dstKey] = dstResult.value,
                _a);
            return obj;
        }
        if (dstResult.mappingError.expected == undefined) {
            throw error_util_1.makeMappingError({
                message: name + " must be valid object. " + dstResult.mappingError.message,
                inputName: name,
                actualValue: mixed,
                expected: "valid object",
                expectedMeta: {
                    srcKey: srcKey,
                    dstKey: dstKey,
                },
                propertyErrors: [
                    dstResult.mappingError,
                ],
            });
        }
        else {
            var expected = "object with " + dstResult.mappingError.expected + " property " + JSON.stringify(srcKey);
            throw error_util_1.makeMappingError({
                message: name + " must be " + expected,
                inputName: name,
                actualValue: mixed,
                expected: expected,
                expectedMeta: {
                    srcKey: srcKey,
                    dstKey: dstKey,
                },
                propertyErrors: [
                    dstResult.mappingError,
                ],
            });
        }
    });
    return mapper_1.copyRunTimeModifier(f, result);
}
exports.derive = derive;
/*
const a = unsignedInteger();
const b = optional(unsignedInteger());
const c = string();
const d = optional(string());

declare const _0 : typeof a;
declare const _1 : typeof b;
declare const _2 : typeof c;
declare const _3 : typeof d;

declare const _01 : (typeof a) | (typeof b);
declare const _02 : (typeof a) | (typeof c);
declare const _03 : (typeof a) | (typeof d);

declare const _12 : (typeof b) | (typeof c);
declare const _13 : (typeof b) | (typeof d);

declare const _23 : (typeof c) | (typeof d);

const __0 = derive("x", "y", _0);
const __1 = derive("x", "y", _1);
const __2 = derive("x", "y", _2);
const __3 = derive("x", "y", _3);

const __01 = derive("x", "y", _01);
const __02 = derive("x", "y", _02);
const __03 = derive("x", "y", _03);

const __12 = derive("x", "y", _12);
const __13 = derive("x", "y", _13);

const __23 = derive("x", "y", _23);
*/ 
//# sourceMappingURL=derive.js.map