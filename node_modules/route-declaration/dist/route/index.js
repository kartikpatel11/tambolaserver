"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./route"));
var RouteUtil = require("./util");
exports.RouteUtil = RouteUtil;
function tryPolyfillBigIntToJson() {
    try {
        var existing = BigInt.prototype.toJSON;
        if (existing != undefined) {
            return {
                success: false,
                err: undefined,
                message: "BigInt.prototype.toJSON already exists",
            };
        }
        //No existing toJSON() polyfill,
        //We add our own.
        //This toJSON() polyfill should work for any BigInt polyfill
        //that has a `.toString()` method.
        BigInt.prototype.toJSON = function () {
            var str = this.toString();
            var num = Number(str);
            if (num.toString() == str) {
                //Prefer `number`
                return num;
            }
            else {
                //Fallback to `string`
                //Useful when numbers get too large to represent correctly
                return str;
            }
        };
        return {
            success: true,
        };
    }
    catch (err) {
        return {
            success: false,
            err: err,
            message: err.message,
        };
    }
}
exports.tryPolyfillBigIntToJson = tryPolyfillBigIntToJson;
//# sourceMappingURL=index.js.map