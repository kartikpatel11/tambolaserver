"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_util_1 = require("../../type-util");
var error_util_1 = require("../../error-util");
/**
 * Returns a mapper that validates if the input is an element of `arr`
 *
 * This function throws an error if `arr.length == 0`
 *
 * @param arr
 *  @see {@link LiteralType}
 */
function unsafeLiteral() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    if (arr.length == 0) {
        throw new Error("Cannot map zero literals");
    }
    var expected = type_util_1.toLiteralUnionStr(arr);
    return function (name, mixed) {
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var item = arr_1[_i];
            if (type_util_1.strictEqual(mixed, item)) {
                return mixed;
            }
        }
        throw error_util_1.makeMappingError({
            message: name + " must be " + expected + "; received " + type_util_1.toTypeStr(mixed),
            inputName: name,
            actualValue: mixed,
            expected: expected,
            expectedMeta: {
                mappableValues: arr.slice(),
                outputValues: arr.slice(),
            },
        });
    };
}
exports.unsafeLiteral = unsafeLiteral;
/**
 * Returns a mapper that validates if the input is one of the arguments
 *
 * @param arg0
 * @param arr
 *  @see {@link LiteralType}
 */
function literal(arg0) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return unsafeLiteral.apply(void 0, [arg0].concat(arr));
}
exports.literal = literal;
//# sourceMappingURL=literal.js.map