"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var __non_error_document_constraint_impl_1 = require("./__non-error-document-constraint-impl");
var json_api_1 = require("../json-api");
var link_collection_1 = require("../link-collection");
var server_resource_1 = require("../server-resource");
var fLib = require("../../fluent-lib");
/**
 * In this implementation, you have to specify one of the following,
 *
 * + `data`
 * + `meta`
 * + both `data` and `meta`
 *
 * If both `data` and `meta` are specified, all documents without `errors` must also contain both.
 *
 * -----
 *
 * https://jsonapi.org/format/1.0/#document-top-level
 *
 * JSON object **MUST** be at the root of every JSON:API request and response containing data.
 * This object defines a document’s “top level”.
 *
 * A document **MUST** contain at least one of the following top-level members:
 *
 * + `data`: the document’s “primary data”
 * + `errors`: an array of error objects
 * + `meta`: a meta object that contains non-standard meta-information.
 *
 * The members `data` and `errors` **MUST NOT** coexist in the same document.
 *
 * A document **MAY** contain any of these top-level members:
 *
 * + `jsonapi`: an object describing the server’s implementation
 * + `links`: a links object related to the primary data.
 * + `included`: an array of resource objects that are related to the primary data and/or each other (“included resources”).
 *
 * If a document does not contain a top-level `data` key, the `included` member **MUST NOT** be present either.
 *
 * The top-level links object **MAY** contain the following members:
 *
 * + `self`: the link that generated the current response document.
 * + `related`: a related resource link when the primary data represents a resource relationship.
 * + pagination links for the primary data.
 *
 * The document’s “primary data” is a representation of the resource or collection of resources targeted by a request.
 *
 * Primary data **MUST** be either:
 *
 * + a single resource object, a single resource identifier object,
 *   or `null`, for requests that target single resources
 * + an array of resource objects, an array of resource identifier objects,
 *   or an empty array (`[]`), for requests that target resource collections
 *
 * A logical collection of resources **MUST** be represented as an array, even if it only contains one item or is empty.
 *
 * @param args - The data, or meta mappers (or both)
 *
 *  @see {@link ServerDocumentMapper}
 *  @see {@link ServerDocument}
 *  @see {@link ExpectedInputServerDocument}
 *  @see {@link MappableInputServerDocument}
 */
function nonErrorServerDocument(args) {
    var serverDocumentBase = {
        resource: server_resource_1.serverResource(),
    };
    var impl = __non_error_document_constraint_impl_1.__nonErrorDocumentConstraintImpl(__assign({}, args, serverDocumentBase));
    var base = fLib.object({
        jsonapi: json_api_1.jsonApi().orNull().optional(),
        links: link_collection_1.linkCollection().orNull().optional(),
    });
    return fLib.deepMerge(impl, base);
}
exports.nonErrorServerDocument = nonErrorServerDocument;
//# sourceMappingURL=non-error-server-document.js.map