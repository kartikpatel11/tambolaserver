"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createPossiblyInstanceOfBigInt(x) {
    if (x == undefined) {
        return function () { return false; };
    }
    try {
        var ctor_1 = Object.getPrototypeOf(x).constructor;
        if (typeof ctor_1 != "function") {
            return function () { return false; };
        }
        //Make sure `instanceof` checks don't throw
        ({} instanceof ctor_1);
        return function (x) {
            return (x instanceof ctor_1);
        };
    }
    catch (_err) {
        return function () { return false; };
    }
}
function tryFindBigIntFactoryFunction() {
    try {
        var unsafeFactory_1 = BigInt;
        if (typeof unsafeFactory_1 != "function") {
            return undefined;
        }
        try {
            var bigInt = unsafeFactory_1(0);
            var possiblyInstanceOfBigInt = createPossiblyInstanceOfBigInt(bigInt);
            var wrapper = (function (x) {
                return unsafeFactory_1(x);
            });
            wrapper.possiblyInstanceOfBigInt = possiblyInstanceOfBigInt;
            wrapper.bigIntNative = (typeof bigInt == "bigint");
            return wrapper;
        }
        catch (_err) {
        }
        try {
            var possiblyInstanceOfBigInt = createPossiblyInstanceOfBigInt(new unsafeFactory_1(0));
            var wrapper = (function (x) {
                return new unsafeFactory_1(x);
            });
            wrapper.possiblyInstanceOfBigInt = possiblyInstanceOfBigInt;
            //Had to use `new`; not supported
            wrapper.bigIntNative = false;
            return wrapper;
        }
        catch (_err) {
        }
        return undefined;
    }
    catch (_err) {
        //No BigInt, no polyfill
        return undefined;
    }
}
var cachedBigIntFactoryFunction = "uninitialized";
function tryGetBigIntFactoryFunction() {
    if (cachedBigIntFactoryFunction == "uninitialized") {
        cachedBigIntFactoryFunction = tryFindBigIntFactoryFunction();
    }
    return cachedBigIntFactoryFunction;
}
exports.tryGetBigIntFactoryFunction = tryGetBigIntFactoryFunction;
function getBigIntFactoryFunctionOrError() {
    var result = tryGetBigIntFactoryFunction();
    if (result == undefined) {
        throw new Error("No native or polyfilled bigint implementation found; set the `BigInt` variable on the `globalThis`/`window`/`global` scope to a polyfilled implementation");
    }
    return result;
}
exports.getBigIntFactoryFunctionOrError = getBigIntFactoryFunctionOrError;
function isBigIntNativelySupported() {
    var factory = tryGetBigIntFactoryFunction();
    if (factory == undefined) {
        return false;
    }
    return factory.bigIntNative;
}
exports.isBigIntNativelySupported = isBigIntNativelySupported;
//# sourceMappingURL=try-get-bigint-factory-function.js.map