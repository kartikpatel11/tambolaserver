/**
    + Zero is false
    + All other finite number values are true
*/
export declare function finiteNumberToBoolean(): import("../..").Mapper<unknown, boolean> & import("../..").ExpectedInput<boolean> & import("../..").MappableInput<number | boolean>;
/**
    + `"1"` is true
    + `/^true$/i` is true
    + All other string values are false

    TODO Is this a good convention?
*/
export declare function stringToBoolean(): import("../..").Mapper<unknown, boolean> & import("../..").ExpectedInput<boolean> & import("../..").MappableInput<string | boolean>;
/**
    + Zero is false
    + All other finite number values are true
*/
export declare function finiteNumberToTrue(): import("../..").Mapper<unknown, true> & import("../..").ExpectedInput<true> & import("../..").MappableInput<number | boolean>;
/**
    + Zero is false
    + All other finite number values are true
*/
export declare function finiteNumberToFalse(): import("../..").Mapper<unknown, false> & import("../..").ExpectedInput<false> & import("../..").MappableInput<number | boolean>;
/**
    + `"1"` is true
    + `/^true$/i` is true
    + All other string values are false

    TODO Is this a good convention?
*/
export declare function stringToTrue(): import("../..").Mapper<unknown, true> & import("../..").ExpectedInput<true> & import("../..").MappableInput<string | boolean>;
/**
    + `"1"` is true
    + `/^true$/i` is true
    + All other string values are false

    TODO Is this a good convention?
*/
export declare function stringToFalse(): import("../..").Mapper<unknown, false> & import("../..").ExpectedInput<false> & import("../..").MappableInput<string | boolean>;
/**
    Uses `stringToBoolean()` and `finiteNumberToBoolean()` internally
*/
export declare function toBoolean(): import("../..").Mapper<unknown, boolean> & import("../..").ExpectedInput<boolean> & import("../..").MappableInput<string | number | boolean>;
/**
    Uses `stringToTrue()` and `finiteNumberToTrue()` internally
*/
export declare function toTrue(): import("../..").Mapper<unknown, true> & import("../..").ExpectedInput<true> & import("../..").MappableInput<string | number | boolean>;
/**
    Uses `stringToFalse()` and `finiteNumberToFalse()` internally
*/
export declare function toFalse(): import("../..").Mapper<unknown, false> & import("../..").ExpectedInput<false> & import("../..").MappableInput<string | number | boolean>;
//# sourceMappingURL=cast.d.ts.map