"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("../../mapper");
var error_util_1 = require("../../error-util");
function cast(srcMapper, castDelegate, dstMapper) {
    var result = mapper_1.copyRunTimeModifier(srcMapper, function (name, mixed) {
        var alreadyDstResult = mapper_1.tryMapHandled(dstMapper, name, mixed);
        if (alreadyDstResult.success) {
            //If this works, we are already the desired data type
            return alreadyDstResult.value;
        }
        var cannotCastPrefix = (alreadyDstResult.mappingError.expected == undefined) ?
            "Cannot cast " + name + ";" :
            "Cannot cast " + name + " to " + alreadyDstResult.mappingError.expected + ";";
        //Failed. We need to cast.
        var mapSrcResult = mapper_1.tryMapHandled(srcMapper, name, mixed);
        if (!mapSrcResult.success) {
            throw error_util_1.makeMappingError({
                message: cannotCastPrefix + " " + mapSrcResult.mappingError.message,
                inputName: name,
                actualValue: mixed,
                expected: (mapSrcResult.mappingError.expected == alreadyDstResult.mappingError.expected ?
                    mapSrcResult.mappingError.expected :
                    "(" + alreadyDstResult.mappingError.expected + ") or (" + mapSrcResult.mappingError.expected + ")"),
                expectedMeta: {
                    mappableValues: ((alreadyDstResult.mappingError.expectedMeta == undefined ||
                        alreadyDstResult.mappingError.expectedMeta.mappableValues == undefined ||
                        mapSrcResult.mappingError.expectedMeta == undefined ||
                        mapSrcResult.mappingError.expectedMeta.mappableValues == undefined) ?
                        undefined : alreadyDstResult.mappingError.expectedMeta.mappableValues.concat(mapSrcResult.mappingError.expectedMeta.mappableValues)),
                    outputValues: ((alreadyDstResult.mappingError.expectedMeta == undefined ||
                        alreadyDstResult.mappingError.expectedMeta.outputValues == undefined) ?
                        undefined : alreadyDstResult.mappingError.expectedMeta.outputValues.slice()),
                },
                unionErrors: [
                    alreadyDstResult.mappingError,
                    mapSrcResult.mappingError,
                ],
            });
        }
        var dst = undefined;
        try {
            dst = castDelegate(mapSrcResult.value);
        }
        catch (castErr) {
            /**
             * In general, this should never happen.
             * If we're here, that means the `castDelegate` or `srcMapper` isn't working right.
             */
            throw error_util_1.makeMappingError({
                message: cannotCastPrefix + " " + castErr.message,
                inputName: name,
                actualValue: mapSrcResult.value,
                /**
                 * Since it seems like the `castDelegate` or `srcMapper` isn't working right,
                 * we should only expect whatever the `dstMapper` expects.
                 */
                expected: alreadyDstResult.mappingError.expected,
                stack: castErr.stack,
            });
        }
        var mapDstResult = mapper_1.tryMapHandled(dstMapper, name, dst);
        if (mapDstResult.success) {
            return mapDstResult.value;
        }
        else {
            /**
             * In general, this should never happen.
             * If we're here, that means the `castDelegate` or `srcMapper` isn't working right.
             */
            throw error_util_1.makeMappingError({
                message: cannotCastPrefix + " " + mapDstResult.mappingError.message,
                inputName: name,
                actualValue: dst,
                /**
                 * Since it seems like the `castDelegate` or `srcMapper` isn't working right,
                 * we should only expect whatever the `dstMapper` expects.
                 */
                expected: mapDstResult.mappingError.expected,
                unionErrors: [
                    alreadyDstResult.mappingError,
                    mapDstResult.mappingError,
                ],
            });
        }
    });
    return result;
}
exports.cast = cast;
//# sourceMappingURL=cast.js.map