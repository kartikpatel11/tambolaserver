import { AnySafeMapper, SafeMapper, OutputOf, ExpectedInputOf, ExpectedInput, MappableInputOf, MappableInput, ExtractRunTimeModifierOrUnknown } from "../../mapper";
export declare type ArrayMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F>[]> & ExpectedInput<ExpectedInputOf<F>[]> & MappableInput<MappableInputOf<F>[]> & ExtractRunTimeModifierOrUnknown<F>);
export declare function array<F extends AnySafeMapper>(f: F): (ArrayMapper<F>);
export declare type ReadOnlyArrayMapper<F extends AnySafeMapper> = (SafeMapper<readonly OutputOf<F>[]> & ExpectedInput<readonly ExpectedInputOf<F>[]> & MappableInput<readonly MappableInputOf<F>[]> & ExtractRunTimeModifierOrUnknown<F>);
export declare function readOnlyArray<F extends AnySafeMapper>(f: F): (ReadOnlyArrayMapper<F>);
//# sourceMappingURL=array.d.ts.map