import { SafeMapper, ExpectedInput, MappableInput } from "../../mapper";
import { FluentMapper } from "../../fluent-mapper";
/**
 * This interface represents a SQL `DECIMAL` type.
 *
 * JavaScript does not have a built-in arbitrary precision decimal type.
 * So, we make do with a minimal interface.
 */
export interface Decimal {
    /**
     * This is the only method a `DECIMAL` type is expected to have.
     * You may use the string representation to convert to a `number|string|bigint`,
     * or use a library implementing arbitrary precision decimal types.
     */
    toString(): string;
    /**
     * A brand that marks this as a SQL `DECIMAL` type.
     * This property will not exist during run-time.
     */
    $isDecimal: void;
}
/**
 *
 * For now, returns a string.
 * Converting to a number risks losing precision.
 *
 * @deprecated
 */
export declare function decimalDeprecated(): (FluentMapper<SafeMapper<Decimal> & ExpectedInput<Decimal> & MappableInput<Decimal | number | bigint | string>>);
/**
 *
 * For now, returns a string.
 * Converting to a number risks losing precision.
 *
 * @deprecated
 */
export declare function decimal(): (FluentMapper<SafeMapper<Decimal> & ExpectedInput<Decimal> & MappableInput<Decimal | number | bigint | string>>);
/**
 *
 * For now, returns a string.
 * Converting to a number risks losing precision.
 */
export declare function decimal(
/**
 * + Min precision is `1`, even though MySQL allows min precision `0`.
 *   Precision `0` is not very meaningful, anyway, right?
 */
precision: number | bigint, 
/**
 * + The min scale is `0`.
 * + `scale` must be <= `precision`.
 */
scale: number | bigint): (FluentMapper<SafeMapper<Decimal> & ExpectedInput<Decimal> & MappableInput<Decimal | number | bigint | string>>);
//# sourceMappingURL=index.d.ts.map