import { AnySafeMapper, SafeMapper, OutputOf, ExpectedInputOf, MappableInputOf, ExpectedInput, MappableInput, ExtractRunTimeModifierOrUnknown, IsOptional, IsExpectedInputOptional } from "../../mapper";
/**
    Use with `and()` or `deepMerge()`

    Renames a property from `srcKey` to `dstKey`.

    Example 1,

    ```ts
    const f = tm.rename("x", "y", tm.stringToUnsignedInteger())

    f("obj", { x : "34" })              //Gives us { y : 34 }
    f("obj", { y : "34" })              //Gives us { y : 34 }
    f("obj", { x : "34", y : "99" })    //Gives us { y : 99 }
    f("obj", { })                       //Error
    f("obj", { x : undefined })         //Error
    f("obj", { y : undefined })         //Error
    ```

    Example 2,

    ```ts
    const f = tm.rename("x", "y", tm.optional(tm.stringToUnsignedInteger()))

    f("obj", { x : "34" })              //Gives us { y : 34 }
    f("obj", { y : "34" })              //Gives us { y : 34 }
    f("obj", { x : "34", y : "99" })    //Gives us { y : 99 }
    f("obj", { })                       //Gives us { y : undefined }
    f("obj", { x : undefined })         //Gives us { y : undefined }
    f("obj", { y : undefined })         //Gives us { y : undefined }
    ```

    Example 3,

    ```ts
    const f = tm.rename("x", "y", tm.orUndefined(tm.stringToUnsignedInteger()))

    f("obj", { x : "34" })              //Gives us { y : 34 }
    f("obj", { y : "34" })              //Gives us { y : 34 }
    f("obj", { x : "34", y : "99" })    //Gives us { y : 99 }
    f("obj", { })                       //Error
    f("obj", { x : undefined })         //Gives us { y : undefined }
    f("obj", { y : undefined })         //Gives us { y : undefined }
    ```
*/
export declare type RenameMapper<SrcKeyT extends string, DstKeyT extends string, F extends AnySafeMapper> = (SafeMapper<{
    [dst in DstKeyT]: OutputOf<F>;
}> & ExpectedInput<IsExpectedInputOptional<F> extends true ? {
    [dst in DstKeyT]?: ExpectedInputOf<F>;
} : {
    [dst in DstKeyT]: ExpectedInputOf<F>;
}> & MappableInput<IsOptional<F> extends true ? ({
    [src in SrcKeyT]?: MappableInputOf<F>;
} | {
    [dst in DstKeyT]?: MappableInputOf<F>;
}) : ({
    [src in SrcKeyT]: MappableInputOf<F>;
} | {
    [dst in DstKeyT]: MappableInputOf<F>;
})> & ExtractRunTimeModifierOrUnknown<F>);
export declare function rename<SrcKeyT extends string, DstKeyT extends string, F extends AnySafeMapper>(srcKey: SrcKeyT, dstKey: DstKeyT, f: F): (RenameMapper<SrcKeyT, DstKeyT, F>);
//# sourceMappingURL=rename.d.ts.map