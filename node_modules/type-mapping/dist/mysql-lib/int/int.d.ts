import { SafeMapper, ExpectedInput, MappableInput } from "../../mapper";
import { FluentMapper } from "../../fluent-mapper";
import * as fLib from "../../fluent-lib";
/**
    Uses `integerFormatString()` and `BigInt()` internally.
*/
export declare function unsafeInt(): (FluentMapper<SafeMapper<bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>);
/**
    [-128, 127]
*/
export declare function tinyIntSigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [-32,768, 32,767]
*/
export declare function smallIntSigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [-8,388,608, 8,388,607]
*/
export declare function mediumIntSigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [-2,147,483,648, 2,147,483,647]
*/
export declare function intSigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [0, 255]
*/
export declare function tinyIntUnsigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [0, 65535]
*/
export declare function smallIntUnsigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [0, 16777215]
*/
export declare function mediumIntUnsigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
/**
    [0, 4294967295]
*/
export declare function intUnsigned(): FluentMapper<fLib.Mapper<unknown, bigint> & ExpectedInput<bigint> & MappableInput<string | number | bigint>>;
//# sourceMappingURL=int.d.ts.map