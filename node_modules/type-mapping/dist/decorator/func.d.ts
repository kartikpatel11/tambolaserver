import { AnySafeMapper, OutputOf } from "../mapper";
import { ToRequiredParameters } from "./to-required-parameters";
export declare type HasParamsOfType<FuncT extends (...args: any[]) => any, ArgsT extends AnySafeMapper[]> = (({
    [index in keyof ArgsT]: OutputOf<Extract<ArgsT[index], AnySafeMapper>>;
}) extends (ToRequiredParameters<FuncT>) ? ((ToRequiredParameters<FuncT>) extends ({
    [index in keyof ArgsT]: OutputOf<Extract<ArgsT[index], AnySafeMapper>>;
}) ? true : false) : false);
export declare type FunctionDecorator<ArgsT extends AnySafeMapper[]> = (<FuncT extends (...args: any[]) => any>(target: (HasParamsOfType<FuncT, ArgsT> extends true ? FuncT : [FuncT, "has parameters of type", Parameters<FuncT>, "not exactly", {
    [index in keyof ArgsT]: OutputOf<Extract<ArgsT[index], AnySafeMapper>>;
}])) => FuncT);
export declare function func<ArgsT extends AnySafeMapper[]>(...mappers: ArgsT): (FunctionDecorator<ArgsT>);
//# sourceMappingURL=func.d.ts.map