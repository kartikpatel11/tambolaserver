"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operator_1 = require("../operator");
var number_1 = require("../number");
var boolean_1 = require("./boolean");
var string_1 = require("../string");
var operator_2 = require("../operator");
var literal_1 = require("../literal");
/**
    + Zero is false
    + All other finite number values are true
*/
function finiteNumberToBoolean() {
    return operator_1.cast(number_1.finiteNumber(), function (num) { return (num != 0); }, boolean_1.boolean());
}
exports.finiteNumberToBoolean = finiteNumberToBoolean;
/**
    + `"1"` is true
    + `/^true$/i` is true
    + All other string values are false

    TODO Is this a good convention?
*/
function stringToBoolean() {
    return operator_1.cast(string_1.string(), function (str) { return (str == "1" || str.toLowerCase() == "true"); }, boolean_1.boolean());
}
exports.stringToBoolean = stringToBoolean;
/**
    + Zero is false
    + All other finite number values are true
*/
function finiteNumberToTrue() {
    return operator_2.pipe(finiteNumberToBoolean(), literal_1.literal(true));
}
exports.finiteNumberToTrue = finiteNumberToTrue;
/**
    + Zero is false
    + All other finite number values are true
*/
function finiteNumberToFalse() {
    return operator_2.pipe(finiteNumberToBoolean(), literal_1.literal(false));
}
exports.finiteNumberToFalse = finiteNumberToFalse;
/**
    + `"1"` is true
    + `/^true$/i` is true
    + All other string values are false

    TODO Is this a good convention?
*/
function stringToTrue() {
    return operator_2.pipe(stringToBoolean(), literal_1.literal(true));
}
exports.stringToTrue = stringToTrue;
/**
    + `"1"` is true
    + `/^true$/i` is true
    + All other string values are false

    TODO Is this a good convention?
*/
function stringToFalse() {
    return operator_2.pipe(stringToBoolean(), literal_1.literal(false));
}
exports.stringToFalse = stringToFalse;
/**
    Uses `stringToBoolean()` and `finiteNumberToBoolean()` internally
*/
function toBoolean() {
    return operator_1.or(stringToBoolean(), finiteNumberToBoolean());
}
exports.toBoolean = toBoolean;
/**
    Uses `stringToTrue()` and `finiteNumberToTrue()` internally
*/
function toTrue() {
    return operator_1.or(stringToTrue(), finiteNumberToTrue());
}
exports.toTrue = toTrue;
/**
    Uses `stringToFalse()` and `finiteNumberToFalse()` internally
*/
function toFalse() {
    return operator_1.or(stringToFalse(), finiteNumberToFalse());
}
exports.toFalse = toFalse;
//# sourceMappingURL=cast.js.map