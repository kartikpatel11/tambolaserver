"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operator_1 = require("../operator");
var object_1 = require("../object");
var number_1 = require("../number");
var mapper_1 = require("../../mapper");
var error_util_1 = require("../../error-util");
var error_code_1 = require("../../error-code");
function byteLength(args) {
    var byteLengthDelegate = operator_1.pipe(number_1.unsignedInteger(), number_1.range({
        gtEq: args.min,
        ltEq: args.max,
    }));
    var expected = ((args.min == undefined) ?
        ((args.max == undefined) ?
            "value with \"byteLength\" property" :
            "value of byteLength less than, or equal to " + args.max.toString()) :
        ((args.max == undefined) ?
            "value of byteLength greater than, or equal to " + args.min.toString() :
            (args.min == args.max) ?
                "value of byteLength " + args.min.toString() :
                "value of byteLength between " + args.min.toString() + " and " + args.max.toString()));
    return operator_1.pipe(object_1.instanceOfObject(), function (name, mixed) {
        var byteLengthResult = mapper_1.tryMapHandled(byteLengthDelegate, name + ".byteLength", mixed.byteLength);
        if (byteLengthResult.success) {
            return mixed;
        }
        else {
            throw error_util_1.makeMappingError({
                message: name + " must be " + expected,
                inputName: name,
                actualValue: mixed,
                expected: expected,
                expectedMeta: {
                    errorCode: error_code_1.ErrorCode.EXPECTED_BYTE_LENGTH,
                    min: args.min,
                    max: args.max,
                },
                propertyErrors: [
                    byteLengthResult.mappingError,
                ],
            });
        }
    });
}
exports.byteLength = byteLength;
//# sourceMappingURL=byte-length.js.map