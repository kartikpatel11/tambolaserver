import { IRouter, RouterData } from "./router";
import { Response, ResponseData } from "../response";
export declare type DataOf<RouterT extends IRouter<RouterData>> = (RouterT extends IRouter<infer DataT> ? DataT : never);
export declare type ToRequestRouteData<DataT extends RouterData> = ({
    request: {
        params: {
            [k: string]: unknown;
        };
        query: {
            [k: string]: unknown;
        };
        body: {
            [k: string]: unknown;
        };
        headers: {
            [k: string]: unknown;
        };
    };
    response: {
        locals: DataT["locals"];
        json: (response: unknown) => Response<ResponseData>;
    };
});
export declare type ToErrorRouteData<DataT extends RouterData> = ({
    request: {
        params: {
            [k: string]: unknown;
        };
        query: {
            [k: string]: unknown;
        };
        body: {
            [k: string]: unknown;
        };
        headers: {
            [k: string]: unknown;
        };
    };
    response: {
        locals: Partial<DataT["locals"]>;
        json: (response: unknown) => Response<ResponseData>;
    };
});
export declare type AssertExpressRouterCompatible<DataT extends RouterData, ResultT, ErrorT> = (true extends DataT["__hasParentApp"] ? ["This router is already used by an app and cannot be", ErrorT] : ResultT);
//# sourceMappingURL=util.d.ts.map