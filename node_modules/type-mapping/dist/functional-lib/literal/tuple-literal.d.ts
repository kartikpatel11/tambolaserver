import { SafeMapper } from "../../mapper";
import { LiteralType } from "../../primitive";
export declare type TupleLiteralMapper<TupleT extends readonly LiteralType[]> = (SafeMapper<TupleT>);
/**
 * Returns a mapper that checks if incoming data matches the tuple `TupleT`.
 *
 * ```ts
 * tupleLiteral("a", "b")("x", ["a", "b"]);       //OK!
 * tupleLiteral("a", "b")("x", ["a", "b", "c"]);  //Error
 * tupleLiteral("a", "b")("x", ["a"]);            //Error
 * tupleLiteral("a", "b")("x", ["b", "a"]);       //Error
 * ```
 *
 * @param tuple The tuple incoming data must equal to
 */
export declare function tupleLiteral<TupleT extends readonly LiteralType[]>(...tuple: TupleT): (TupleLiteralMapper<TupleT>);
//# sourceMappingURL=tuple-literal.d.ts.map