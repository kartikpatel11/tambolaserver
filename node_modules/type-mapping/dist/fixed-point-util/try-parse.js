"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FloatingPointUtil = require("../floating-point-util");
var type_util_1 = require("../type-util");
var BigIntUtil = require("../bigint-util");
var string_util_1 = require("../string-util");
function lazyInit(initDelegate) {
    var initialized = false;
    var value = undefined;
    return function () {
        if (!initialized) {
            value = initDelegate();
            initialized = true;
        }
        return value;
    };
}
/**
 * @todo Make `getXxx()` functions cache results
 */
function tryParse(str) {
    var parsed = FloatingPointUtil.tryParse(str);
    if (parsed == undefined) {
        return undefined;
    }
    var _a = FloatingPointUtil.toIntegerAndExponent(parsed), isNegative = _a.isNegative, integerPart = _a.integerPart, isZero = _a.isZero, exponentValue = _a.exponentValue;
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (isZero) {
        var fixedPointIntegerPartLength = BigInt(1);
        var fixedPointFractionalPartLength = BigInt(1);
        var fixedPointLength = BigIntUtil.addMany((isNegative ? BigInt(1) : BigInt(0)), fixedPointIntegerPartLength, BigInt(1), fixedPointFractionalPartLength);
        var getFixedPointIntegerPartString_1 = function () { return "0"; };
        var getFixedPointFractionalPartString_1 = function () { return "0"; };
        var getFixedPointString = lazyInit(function () {
            var sign = isNegative ? "-" : "";
            return (sign +
                getFixedPointIntegerPartString_1() +
                "." +
                getFixedPointFractionalPartString_1());
        });
        return {
            isInteger: true,
            isNegative: isNegative,
            isZero: isZero,
            fixedPointIntegerPartLength: fixedPointIntegerPartLength,
            fixedPointFractionalPartLength: fixedPointFractionalPartLength,
            fixedPointLength: fixedPointLength,
            getFixedPointIntegerPartString: getFixedPointIntegerPartString_1,
            getFixedPointFractionalPartString: getFixedPointFractionalPartString_1,
            getFixedPointString: getFixedPointString,
        };
    }
    if (BigIntUtil.greaterThanOrEqual(exponentValue, 0)) {
        var fixedPointIntegerPartLength = BigIntUtil.add(BigInt(integerPart.length), exponentValue);
        var fixedPointFractionalPartLength = BigInt(1);
        var fixedPointLength = BigIntUtil.addMany((isNegative ? BigInt(1) : BigInt(0)), fixedPointIntegerPartLength, BigInt(1), fixedPointFractionalPartLength);
        var getFixedPointIntegerPartString_2 = lazyInit(function () { return (integerPart + string_util_1.stringRepeat("0", BigIntUtil.toNumber(exponentValue))); });
        var getFixedPointFractionalPartString_2 = function () { return "0"; };
        var getFixedPointString = lazyInit(function () {
            var sign = isNegative ? "-" : "";
            return (sign +
                getFixedPointIntegerPartString_2() +
                "." +
                getFixedPointFractionalPartString_2());
        });
        return {
            isInteger: true,
            isNegative: isNegative,
            isZero: isZero,
            fixedPointIntegerPartLength: fixedPointIntegerPartLength,
            fixedPointFractionalPartLength: fixedPointFractionalPartLength,
            fixedPointLength: fixedPointLength,
            getFixedPointIntegerPartString: getFixedPointIntegerPartString_2,
            getFixedPointFractionalPartString: getFixedPointFractionalPartString_2,
            getFixedPointString: getFixedPointString,
        };
    }
    else {
        var fractionalOffset = BigIntUtil.mul(exponentValue, -1);
        if (BigIntUtil.lessThan(fractionalOffset, integerPart.length)) {
            var newIntegerPart_1 = integerPart.substring(0, integerPart.length - BigIntUtil.toNumber(fractionalOffset));
            var newFractionalPart_1 = integerPart.substring(integerPart.length - BigIntUtil.toNumber(fractionalOffset), integerPart.length).replace(/(0+)$/, "");
            if (newFractionalPart_1 == "") {
                newFractionalPart_1 = "0";
            }
            var fixedPointIntegerPartLength = BigInt(newIntegerPart_1.length);
            var fixedPointFractionalPartLength = BigInt(newFractionalPart_1.length);
            var fixedPointLength = BigIntUtil.addMany((isNegative ? BigInt(1) : BigInt(0)), fixedPointIntegerPartLength, BigInt(1), fixedPointFractionalPartLength);
            var getFixedPointIntegerPartString_3 = function () { return newIntegerPart_1; };
            var getFixedPointFractionalPartString_3 = function () { return newFractionalPart_1; };
            var getFixedPointString = lazyInit(function () {
                var sign = isNegative ? "-" : "";
                return (sign +
                    getFixedPointIntegerPartString_3() +
                    "." +
                    getFixedPointFractionalPartString_3());
            });
            return {
                isInteger: (newFractionalPart_1 == "0"),
                isNegative: isNegative,
                isZero: isZero,
                fixedPointIntegerPartLength: fixedPointIntegerPartLength,
                fixedPointFractionalPartLength: fixedPointFractionalPartLength,
                fixedPointLength: fixedPointLength,
                getFixedPointIntegerPartString: getFixedPointIntegerPartString_3,
                getFixedPointFractionalPartString: getFixedPointFractionalPartString_3,
                getFixedPointString: getFixedPointString,
            };
        }
        else if (BigIntUtil.equal(fractionalOffset, BigInt(integerPart.length))) {
            var newFractionalPart_2 = integerPart.replace(/(0+)$/, "");
            if (newFractionalPart_2 == "") {
                newFractionalPart_2 = "0";
            }
            var fixedPointIntegerPartLength = BigInt(1);
            var fixedPointFractionalPartLength = BigInt(newFractionalPart_2.length);
            var fixedPointLength = BigIntUtil.addMany((isNegative ? BigInt(1) : BigInt(0)), fixedPointIntegerPartLength, BigInt(1), fixedPointFractionalPartLength);
            var getFixedPointIntegerPartString_4 = function () { return ("0"); };
            var getFixedPointFractionalPartString_4 = function () { return newFractionalPart_2; };
            var getFixedPointString = lazyInit(function () {
                var sign = isNegative ? "-" : "";
                return (sign +
                    getFixedPointIntegerPartString_4() +
                    "." +
                    getFixedPointFractionalPartString_4());
            });
            return {
                isInteger: (newFractionalPart_2 == "0"),
                isNegative: isNegative,
                isZero: isZero,
                fixedPointIntegerPartLength: fixedPointIntegerPartLength,
                fixedPointFractionalPartLength: fixedPointFractionalPartLength,
                fixedPointLength: fixedPointLength,
                getFixedPointIntegerPartString: getFixedPointIntegerPartString_4,
                getFixedPointFractionalPartString: getFixedPointFractionalPartString_4,
                getFixedPointString: getFixedPointString,
            };
        }
        else {
            var leadingZeroCount_1 = BigIntUtil.sub(fractionalOffset, BigInt(integerPart.length));
            var newFractionalPart_3 = integerPart.replace(/(0+)$/, "");
            if (newFractionalPart_3 == "") {
                leadingZeroCount_1 = BigInt(0);
                newFractionalPart_3 = "0";
            }
            var fixedPointIntegerPartLength = BigInt(1);
            var fixedPointFractionalPartLength = BigIntUtil.add(leadingZeroCount_1, BigInt(newFractionalPart_3.length));
            var fixedPointLength = BigIntUtil.addMany((isNegative ? BigInt(1) : BigInt(0)), fixedPointIntegerPartLength, BigInt(1), fixedPointFractionalPartLength);
            var getFixedPointIntegerPartString_5 = function () { return ("0"); };
            var getFixedPointFractionalPartString_5 = lazyInit(function () { return (string_util_1.stringRepeat("0", BigIntUtil.toNumber(leadingZeroCount_1)) +
                newFractionalPart_3); });
            var getFixedPointString = lazyInit(function () {
                var sign = isNegative ? "-" : "";
                return (sign +
                    getFixedPointIntegerPartString_5() +
                    "." +
                    getFixedPointFractionalPartString_5());
            });
            return {
                isInteger: (newFractionalPart_3 == "0"),
                isNegative: isNegative,
                isZero: isZero,
                fixedPointIntegerPartLength: fixedPointIntegerPartLength,
                fixedPointFractionalPartLength: fixedPointFractionalPartLength,
                fixedPointLength: fixedPointLength,
                getFixedPointIntegerPartString: getFixedPointIntegerPartString_5,
                getFixedPointFractionalPartString: getFixedPointFractionalPartString_5,
                getFixedPointString: getFixedPointString,
            };
        }
    }
}
exports.tryParse = tryParse;
//# sourceMappingURL=try-parse.js.map