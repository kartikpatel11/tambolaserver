"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fLib = require("../../fluent-lib");
var TypeUtil = require("../../type-util");
/**
    Converts some values to `boolean`.

    The values `0|1|"0"|"1"` were chosen because
    these values are most likely to show up from
    a MySQL driver to represent a `boolean`

    The values `"false"|"true"` were chosen because
    these values will show up in query strings.
*/
function boolean() {
    var BigInt = TypeUtil.getBigIntFactoryFunctionOrError();
    return fLib.or(fLib.boolean(), fLib.literal("0", "1", 0, 1, "false", "true", BigInt(0), BigInt(1)).pipe(function (name, v) {
        switch (v) {
            case "0": return false;
            case "1": return true;
            case 0: return false;
            case 1: return true;
            case "false": return false;
            case "true": return true;
            default: {
                var str = String(v);
                if (str == "0") {
                    return false;
                }
                else if (str == "1") {
                    return true;
                }
                //Shouldn't happen
                throw new Error("Expected " + name + " to be one of '0'|'1'|0|1|'false'|'true'|'0n'|'1n'");
            }
        }
    })).withExpectedInput();
}
exports.boolean = boolean;
/**
    Converts some values to `true`.

    The values `1|"1"` were chosen because
    these values are most likely to show up from
    a MySQL driver to represent a `boolean`

    The values `"true"` was chosen because
    it will show up in query strings.
*/
function toTrue() {
    var BigInt = TypeUtil.getBigIntFactoryFunctionOrError();
    return fLib.or(fLib.literal(true), fLib.literal("1", 1, "true", BigInt(1)).pipe(function (name, v) {
        switch (v) {
            case "1": return true;
            case 1: return true;
            case "true": return true;
            default: {
                var str = String(v);
                if (str == "1") {
                    return true;
                }
                //Shouldn't happen
                throw new Error("Expected " + name + " to be one of '1'|1|'true'");
            }
        }
    })).withExpectedInput();
}
exports.true = toTrue;
/**
    Converts some values to `false`.

    The values `0|"0"` were chosen because
    these values are most likely to show up from
    a MySQL driver to represent a `boolean`

    The values `"false"` was chosen because
    it will show up in query strings.
*/
function toFalse() {
    var BigInt = TypeUtil.getBigIntFactoryFunctionOrError();
    return fLib.or(fLib.literal(false), fLib.literal("0", 0, "false", BigInt(0)).pipe(function (name, v) {
        switch (v) {
            case "0": return false;
            case 0: return false;
            case "false": return false;
            default: {
                var str = String(v);
                if (str == "0") {
                    return false;
                }
                //Shouldn't happen
                throw new Error("Expected " + name + " to be one of '0'|0|'false'");
            }
        }
    })).withExpectedInput();
}
exports.false = toFalse;
//# sourceMappingURL=index.js.map