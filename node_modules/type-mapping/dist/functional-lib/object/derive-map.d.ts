import { FieldMap, NonOptionalExpectedInputKey, OptionalExpectedInputKey, NonOptionalMappableInputKey, OptionalMappableInputKey, ExtractLiteralDstName } from "../../field-map";
import { SafeMapper, ExpectedInput, OutputOf, ExpectedInputOf, MappableInputOf, MappableInput, MergedOutputOf, Name } from "../../mapper";
export declare type DeriveMapMapper<MapT extends FieldMap> = (SafeMapper<{
    [dst in ExtractLiteralDstName<MapT>]: (MergedOutputOf<Extract<MapT[Extract<keyof MapT, string>], Name<dst>>>);
} & (string extends MapT[Extract<keyof MapT, string>]["__name"] ? {
    [name: string]: (OutputOf<Exclude<MapT[Extract<keyof MapT, string>], Name<ExtractLiteralDstName<MapT>>>> | undefined);
} : unknown)> & ExpectedInput<(NonOptionalExpectedInputKey<MapT> extends never ? unknown : {
    [src in NonOptionalExpectedInputKey<MapT>]: (ExpectedInputOf<MapT[src]>);
}) & (OptionalExpectedInputKey<MapT> extends never ? unknown : {
    [src in OptionalExpectedInputKey<MapT>]?: (ExpectedInputOf<MapT[src]>);
})> & MappableInput<(NonOptionalMappableInputKey<MapT> extends never ? unknown : {
    [src in NonOptionalMappableInputKey<MapT>]: (MappableInputOf<MapT[src]>);
}) & (OptionalMappableInputKey<MapT> extends never ? unknown : {
    [src in OptionalMappableInputKey<MapT>]?: (MappableInputOf<MapT[src]>);
})>);
export declare function deriveMap<MapT extends FieldMap>(map: MapT): (DeriveMapMapper<MapT>);
//# sourceMappingURL=derive-map.d.ts.map