"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("../../mapper");
var TypeUtil = require("../../type-util");
var error_util_1 = require("../../error-util");
var array_util_1 = require("../../array-util");
var string_util_1 = require("../../string-util");
function unsafeDeepMerge() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    if (arr.length == 0) {
        throw new Error("Cannot deep merge zero mappers");
    }
    if (arr.length == 1) {
        return arr[0];
    }
    var mapper = function (name, mixed) {
        var intersectionErrors = [];
        var values = [];
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var f = arr_1[_i];
            var elementResult = mapper_1.tryMapHandled(f, name, mixed);
            if (elementResult.success) {
                values.push(elementResult.value);
            }
            else {
                intersectionErrors.push(elementResult.mappingError);
            }
        }
        if (intersectionErrors.length == 1) {
            throw intersectionErrors[0];
        }
        if (intersectionErrors.length > 1) {
            var errorMessages = array_util_1.removeDuplicateElements(intersectionErrors
                .map(function (e) { return error_util_1.indentErrorMessage(e.message); }));
            var expectedElements = array_util_1.removeDuplicateElements(intersectionErrors
                .map(function (e) { return e.expected; })
                .filter(function (i) { return typeof i == "string"; }));
            throw error_util_1.makeMappingError({
                message: name + " is invalid.\n+ " + errorMessages.join("\n+ "),
                inputName: name,
                actualValue: mixed,
                expected: ((expectedElements.length == 0) ?
                    undefined :
                    (expectedElements.length == 1) ?
                        expectedElements[0] :
                        expectedElements
                            .map(function (str) { return "(" + str + ")"; })
                            .join(" and ")),
                intersectionErrors: intersectionErrors,
            });
        }
        var deepMergeResult = TypeUtil.tryDeepMerge.apply(TypeUtil, values);
        if (deepMergeResult.success) {
            return deepMergeResult.value;
        }
        else {
            /**
             * In general, this should not happen.
             * If we are here, our mappers may be doing something suspicious.
             */
            /**
             * If `path.length == 0`,
             * then it's a top-level value that failed to merge
             */
            if (deepMergeResult.path == undefined) {
                console.log(deepMergeResult);
            }
            if (deepMergeResult.path.length == 0) {
                throw error_util_1.makeMappingError({
                    message: name + " is invalid; " + deepMergeResult.message,
                    inputName: name,
                    actualValue: deepMergeResult.actualValue,
                    expected: deepMergeResult.expected,
                });
            }
            else {
                throw error_util_1.makeMappingError({
                    message: name + " is invalid; " + deepMergeResult.message,
                    inputName: name,
                    actualValue: deepMergeResult.bRoot,
                    expected: deepMergeResult.path.reduceRight(function (memo, part) {
                        return "{ " + JSON.stringify(part) + " : " + memo + " }";
                    }, deepMergeResult.expected),
                    propertyErrors: [
                        error_util_1.makeMappingError({
                            message: deepMergeResult.message,
                            inputName: deepMergeResult.path.reduce(function (memo, part) {
                                return memo + string_util_1.toPropertyAccess(part);
                            }, name),
                            actualValue: deepMergeResult.actualValue,
                            expected: deepMergeResult.expected,
                        }),
                    ],
                });
            }
        }
    };
    return mapper_1.copyRunTimeModifier(arr[0], mapper);
}
exports.unsafeDeepMerge = unsafeDeepMerge;
function deepMerge(f) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return unsafeDeepMerge.apply(void 0, [f].concat(arr));
}
exports.deepMerge = deepMerge;
/*
import {length} from "../array-like";
import {string} from "../string";
const dm = deepMerge(
    (null as unknown as (() => { x : "test" }) & ExpectedInput<{ foo : string }> & MappableInput<{ foo? : string|Buffer }>),
    () : { x : 1 } => (null as any),
    () : { y : true } => (null as any),
    () : { y? : true } => (null as any),
    (null as unknown as (() => { z : Date }) & MappableInput<{ foo? : Buffer }>),
);
dm("", "").y

//*
const dm2 = deepMerge(
    (null as unknown as (() => number) & ExpectedInput<{ foo : string }> & MappableInput<string>),
    (null as unknown as (() => string) & MappableInput<number>),
);
const dm3 = deepMerge(
    (null as unknown as (() => number) & ExpectedInput<{ foo : string }> & MappableInput<{ foo? : string|Buffer }>),
    (null as unknown as (() => string)),
    (null as unknown as (() => { x : "test" }) & ExpectedInput<{ foo : string }> & MappableInput<{ foo? : string|Buffer }>),
);

const dm4 = deepMerge(
    length({
        min : 1
    }),
    string()
)
//*/ 
//# sourceMappingURL=deep-merge.js.map