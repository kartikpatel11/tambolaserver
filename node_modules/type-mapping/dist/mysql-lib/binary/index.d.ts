import { FluentMapper } from "../../fluent-mapper";
export declare const binary: {
    (desiredLengthMin: number, desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    maxLength: number;
};
export declare const varBinary: {
    (desiredLengthMin: number, desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    maxLength: number;
};
export declare const tinyBlob: {
    (desiredLengthMin: number, desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    maxLength: number;
};
export declare const blob: {
    (desiredLengthMin: number, desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    maxLength: number;
};
export declare const mediumBlob: {
    (desiredLengthMin: number, desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    maxLength: number;
};
export declare const longBlob: {
    (desiredLengthMin: number, desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (desiredLengthMax: number): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    (): FluentMapper<import("../../mapper").Mapper<unknown, Buffer>>;
    maxLength: number;
};
//# sourceMappingURL=index.d.ts.map