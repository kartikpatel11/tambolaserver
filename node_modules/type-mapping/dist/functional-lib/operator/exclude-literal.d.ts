import { SafeMapper, AnySafeMapper, OutputOf, ExpectedInput, MappableInput, ExtractRunTimeModifierOrUnknown } from "../../mapper";
import { LiteralType } from "../../primitive";
export declare type ExcludeLiteralMapper<F extends AnySafeMapper, ArrT extends LiteralType[]> = (SafeMapper<Exclude<OutputOf<F>, ArrT[number]>> & (F extends ExpectedInput<infer T> ? ExpectedInput<Exclude<T, ArrT[number]>> : unknown) & (F extends MappableInput<infer T> ? MappableInput<Exclude<T, ArrT[number]>> : unknown) & ExtractRunTimeModifierOrUnknown<F>);
export declare function excludeLiteral<F extends AnySafeMapper, ArrT extends LiteralType[]>(f: F, ...arr: ArrT): ExcludeLiteralMapper<F, ArrT>;
//# sourceMappingURL=exclude-literal.d.ts.map