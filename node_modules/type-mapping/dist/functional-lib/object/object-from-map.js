"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("../../mapper");
var instance_of_object_1 = require("./instance-of-object");
var operator_1 = require("../operator");
var to_empty_object_1 = require("./to-empty-object");
var string_util_1 = require("../../string-util");
var error_util_1 = require("../../error-util");
/**
    Always returns a new object.

    If the input contains additional fields not part
    of the map, they will not be in the new object.
*/
function objectFromMap(map) {
    var keys = Object.keys(map);
    if (keys.length == 0) {
        return to_empty_object_1.toEmptyObject();
    }
    var runTimeRequiredDict = {};
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var k = keys_1[_i];
        runTimeRequiredDict[k] = mapper_1.getRunTimeRequiredFlagOrFalse(map[k]);
    }
    return mapper_1.mapper(operator_1.pipe(instance_of_object_1.instanceOfObject(), function (name, mixed) {
        var propertyErrors = [];
        var result = {};
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var k = keys_2[_i];
            if (Object.prototype.hasOwnProperty.call(mixed, k) || runTimeRequiredDict[k] === false) {
                var propertyResult = mapper_1.tryMapHandled(map[k], "" + name + string_util_1.toPropertyAccess(k), mixed[k]);
                if (propertyResult.success) {
                    result[k] = propertyResult.value;
                }
                else {
                    propertyErrors.push(propertyResult.mappingError);
                }
            }
            else {
                propertyErrors.push(error_util_1.makeMappingError({
                    message: "" + name + string_util_1.toPropertyAccess(k) + " must be explicitly set",
                    inputName: "" + name + string_util_1.toPropertyAccess(k),
                    actualValue: undefined,
                    expected: "explicitly set",
                }));
            }
        }
        if (propertyErrors.length == 0) {
            return result;
        }
        else {
            throw error_util_1.makeMappingError({
                message: name + " must be valid object",
                inputName: name,
                actualValue: mixed,
                expected: "valid object",
                propertyErrors: propertyErrors,
            });
        }
    }));
}
exports.objectFromMap = objectFromMap;
/*
import {optional, orUndefined} from "../operator";
import {unsignedInteger} from "../number";

const m = objectFromMap({
    shouldBeOptional : optional(unsignedInteger()),
    shouldNotBeOptional : orUndefined(unsignedInteger())
});
m.__expectedInput
m.__mappableInput


declare const map2 : {

    [name : string] : SafeMapper<number>|SafeMapper<boolean>
};
const m2 = objectFromMap(map2);
m2.__expectedInput
m2.__mappableInput


declare const map3 : {
    k : SafeMapper<number>|SafeMapper<boolean>,
    l : SafeMapper<number>,
};
const m3 = objectFromMap(map3);
m3.__expectedInput
m3.__mappableInput
//*/ 
//# sourceMappingURL=object-from-map.js.map