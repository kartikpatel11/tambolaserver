import { AnySafeMapper, SafeMapper, OutputOf, ExpectedInput, ExpectedInputOf, MappableInput, MappableInputOf, Optional, ExtractNameOrUnknown, ExtractOptionalOrUnknown, ExtractRunTimeModifierOrUnknown, ExtractRunTimeRequiredOrUnknown, RunTimeRequired } from "../../mapper";
export declare type OrUndefinedMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F> | undefined> & ExpectedInput<ExpectedInputOf<F> | undefined> & MappableInput<MappableInputOf<F> | undefined> & ExtractRunTimeModifierOrUnknown<F>);
export declare function orUndefined<F extends AnySafeMapper>(f: F): OrUndefinedMapper<F>;
export declare type OrNullMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F> | null> & ExpectedInput<ExpectedInputOf<F> | null> & MappableInput<MappableInputOf<F> | null> & ExtractRunTimeModifierOrUnknown<F>);
export declare function orNull<F extends AnySafeMapper>(f: F): OrNullMapper<F>;
export declare type OrMaybeMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F> | null | undefined> & ExpectedInput<ExpectedInputOf<F> | null | undefined> & MappableInput<MappableInputOf<F> | null | undefined> & ExtractRunTimeModifierOrUnknown<F>);
export declare function orMaybe<F extends AnySafeMapper>(f: F): OrMaybeMapper<F>;
export declare type NotUndefinedMapper<F extends AnySafeMapper> = (SafeMapper<Exclude<OutputOf<F>, undefined>> & ExpectedInput<Exclude<ExpectedInputOf<F>, undefined>> & MappableInput<Exclude<MappableInputOf<F>, undefined>> & ExtractRunTimeModifierOrUnknown<F>);
export declare function notUndefined<F extends AnySafeMapper>(f: F): NotUndefinedMapper<F>;
export declare type NotNullMapper<F extends AnySafeMapper> = (SafeMapper<Exclude<OutputOf<F>, null>> & ExpectedInput<Exclude<ExpectedInputOf<F>, null>> & MappableInput<Exclude<MappableInputOf<F>, null>> & ExtractRunTimeModifierOrUnknown<F>);
export declare function notNull<F extends AnySafeMapper>(f: F): NotNullMapper<F>;
export declare type NotMaybeMapper<F extends AnySafeMapper> = (SafeMapper<Exclude<OutputOf<F>, null | undefined>> & ExpectedInput<Exclude<ExpectedInputOf<F>, null | undefined>> & MappableInput<Exclude<MappableInputOf<F>, null | undefined>> & ExtractRunTimeModifierOrUnknown<F>);
export declare function notMaybe<F extends AnySafeMapper>(assert: F): NotMaybeMapper<F>;
/**
    Does not make sense to keep the `RunTimeRequired` flag
    if it is optional during compile-time
*/
export declare type OptionalMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F> | undefined> & ExpectedInput<ExpectedInputOf<F> | undefined> & MappableInput<MappableInputOf<F> | undefined> & ExtractNameOrUnknown<F> & Optional);
export declare function optional<F extends AnySafeMapper>(f: F): (OptionalMapper<F>);
export declare type NotOptionalMapper<F extends AnySafeMapper> = (SafeMapper<Exclude<OutputOf<F>, undefined>> & ExpectedInput<Exclude<ExpectedInputOf<F>, undefined>> & MappableInput<Exclude<MappableInputOf<F>, undefined>> & ExtractNameOrUnknown<F> & ExtractRunTimeRequiredOrUnknown<F>);
export declare function notOptional<F extends AnySafeMapper>(f: F): (NotOptionalMapper<F>);
/**
    Does not make sense to keep the `Optional` compile-time flag
    if it is required during run-time.
*/
export declare type RunTimeRequiredMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F>> & ExpectedInput<ExpectedInputOf<F>> & MappableInput<MappableInputOf<F>> & ExtractNameOrUnknown<F> & RunTimeRequired);
export declare function runTimeRequired<F extends AnySafeMapper>(f: F): (RunTimeRequiredMapper<F>);
export declare type NotRunTimeRequiredMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F>> & ExpectedInput<ExpectedInputOf<F>> & MappableInput<MappableInputOf<F>> & ExtractNameOrUnknown<F> & ExtractOptionalOrUnknown<F>);
export declare function notRunTimeRequired<F extends AnySafeMapper>(f: F): (NotRunTimeRequiredMapper<F>);
//# sourceMappingURL=missing-value.d.ts.map