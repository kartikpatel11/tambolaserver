"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var operator_1 = require("../operator");
var number_1 = require("../number");
var number_string_1 = require("./number-string");
var type_util_1 = require("../../type-util");
var error_util_1 = require("../../error-util");
function finiteNumberToFiniteNumberString() {
    return operator_1.cast(number_1.finiteNumber(), function (num) { return num.toString(); }, number_string_1.finiteNumberString());
}
exports.finiteNumberToFiniteNumberString = finiteNumberToFiniteNumberString;
function integerToIntegerString() {
    return operator_1.cast(number_1.integer(), function (num) { return num.toString(); }, number_string_1.integerString());
}
exports.integerToIntegerString = integerToIntegerString;
function unsignedIntegerToUnsignedIntegerString() {
    return operator_1.cast(number_1.unsignedInteger(), function (num) { return num.toString(); }, number_string_1.unsignedIntegerString());
}
exports.unsignedIntegerToUnsignedIntegerString = unsignedIntegerToUnsignedIntegerString;
/**
    Calls either `JSON.stringify()` or `JSON.parse()` once.
*/
function jsonObjectToJsonObjectString() {
    return function (name, mixed) {
        if (typeof mixed == "string") {
            if (!/^\s*\{/.test(mixed)) {
                throw error_util_1.makeMappingError({
                    message: name + " must be JSON Object string",
                    inputName: name,
                    actualValue: mixed,
                    expected: "JSON Object string",
                });
            }
            try {
                JSON.parse(mixed);
            }
            catch (err) {
                throw error_util_1.makeMappingError({
                    message: name + " must be valid JSON Object string; " + err.message,
                    inputName: name,
                    actualValue: mixed,
                    expected: "valid JSON Object string",
                });
            }
            return mixed;
        }
        try {
            var str = JSON.stringify(mixed);
            if (typeof str == "string" && str[0] == "{") {
                if (type_util_1.isBigIntNativelySupported() || !type_util_1.isBigInt(mixed)) {
                    return str;
                }
            }
            throw error_util_1.makeMappingError({
                message: name + " must be JSON Object; received " + type_util_1.toTypeStr(mixed),
                inputName: name,
                actualValue: mixed,
                expected: "JSON Object",
            });
        }
        catch (err) {
            throw error_util_1.makeMappingError({
                message: name + " must be JSON Object; " + err.message,
                inputName: name,
                actualValue: mixed,
                expected: "JSON Object",
            });
        }
    };
}
exports.jsonObjectToJsonObjectString = jsonObjectToJsonObjectString;
//# sourceMappingURL=cast.js.map