"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var route_1 = require("../route");
var void_handler_1 = require("../void-handler");
var value_handler_1 = require("../value-handler");
var async_void_handler_1 = require("../async-void-handler");
var async_value_handler_1 = require("../async-value-handler");
/**
    Creates a new router.
    Is backwards compatible with `expressCore.IRouter`.
*/
function router() {
    var preRouteHandlers = [];
    var result = express.Router();
    result.__hasParentApp = false;
    result.voidHandler = function (handler) {
        preRouteHandlers.push(void_handler_1.VoidHandlerUtil.toSafeRequestVoidHandler(handler));
        return result;
    };
    result.errorVoidHandler = function (handler) {
        preRouteHandlers.push(void_handler_1.VoidHandlerUtil.toSafeErrorVoidHandler(handler));
        return result;
    };
    result.valueHandler = function (handler) {
        preRouteHandlers.push(value_handler_1.ValueHandlerUtil.toSafeRequestVoidHandler(handler));
        return result;
    };
    result.errorValueHandler = function (handler) {
        preRouteHandlers.push(value_handler_1.ValueHandlerUtil.toSafeErrorVoidHandler(handler));
        return result;
    };
    result.asyncVoidHandler = function (handler) {
        preRouteHandlers.push(async_void_handler_1.AsyncVoidHandlerUtil.toSafeRequestVoidHandler(handler));
        return result;
    };
    result.asyncErrorVoidHandler = function (handler) {
        preRouteHandlers.push(async_void_handler_1.AsyncVoidHandlerUtil.toSafeErrorVoidHandler(handler));
        return result;
    };
    result.asyncValueHandler = function (handler) {
        preRouteHandlers.push(async_value_handler_1.AsyncValueHandlerUtil.toSafeRequestVoidHandler(handler));
        return result;
    };
    result.asyncErrorValueHandler = function (handler) {
        preRouteHandlers.push(async_value_handler_1.AsyncValueHandlerUtil.toSafeErrorVoidHandler(handler));
        return result;
    };
    result.createRoute = function (routeDeclaration) {
        var newRoute = route_1.route(routeDeclaration, result, preRouteHandlers);
        return newRoute;
    };
    var originalUse = result.use.bind(result);
    result.use = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var arg = args_1[_a];
            if (arg != undefined && arg.__hasParentApp === true) {
                throw new Error("Attempt to use sub-app/router already used by an app");
            }
        }
        return originalUse.apply(void 0, args);
    };
    return result;
}
exports.router = router;
//# sourceMappingURL=impl.js.map