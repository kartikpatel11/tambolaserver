import { SafeMapper } from "../../mapper";
export declare function string(): SafeMapper<string>;
/**
    Calls `JSON.parse()` once.
*/
export declare function jsonObjectString(): SafeMapper<string>;
export declare function stringLength(args: {
    min?: number;
    max?: number;
}): SafeMapper<string>;
export declare function stringExactLength(length: number): SafeMapper<string>;
export interface MatchMapperErrorDelegate {
    (name: string): (string | {
        message: string;
        expected: string;
    });
}
export declare function match(regex: RegExp, errorDelegate?: MatchMapperErrorDelegate): SafeMapper<string>;
export declare function notMatch(regex: RegExp, errorDelegate?: MatchMapperErrorDelegate): SafeMapper<string>;
/**
 *
 * Alias for `emailAddress()`
 *  @see {@link emailAddress}
 *
 * @deprecated
 */
export declare function email(): SafeMapper<string>;
/**
 * Runs the regex `/^.+@.+$/` on the string.
 * Doesn't exactly follow a standard.
 *
 * You may roll your own email address validator,
 * but it's better to just send a confirmation
 * email to check the email address is valid.
 */
export declare function emailAddress(): SafeMapper<string>;
/**
 * + Allows empty string.
 * + Allows digits 0-9.
 * + Allows uppercase A-F.
 * + Allows lowercase a-f.
 */
export declare function hexadecimalString(): SafeMapper<string>;
export declare function toUpperCase(): SafeMapper<string>;
export declare function toLowerCase(): SafeMapper<string>;
export declare function padLeft(minLength: number, char: string): SafeMapper<string>;
export declare function padRight(minLength: number, char: string): SafeMapper<string>;
export declare function subStringBlacklist(blacklist: string[], configuration?: {
    caseInsensitive?: boolean;
}): SafeMapper<string>;
export declare function toTrimmed(): SafeMapper<string>;
//# sourceMappingURL=string.d.ts.map