"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flatten_union_errors_1 = require("./flatten-union-errors");
var array_util_1 = require("../array-util");
var make_mapping_error_1 = require("./make-mapping-error");
var type_util_1 = require("../type-util");
var indent_error_message_1 = require("./indent-error-message");
function everyElementHasMappableValues(arr) {
    return arr.every(function (err) { return err.expectedMeta != undefined && err.expectedMeta.mappableValues != undefined; });
}
function everyElementHasOutputValues(arr) {
    return arr.every(function (err) { return err.expectedMeta != undefined && err.expectedMeta.outputValues != undefined; });
}
function makeNormalizedUnionError(name, mixed, unionErrors) {
    unionErrors = flatten_union_errors_1.flattenUnionErrors(unionErrors);
    var rawExpectedArr = unionErrors
        .map(function (e) { return e.expected; })
        .filter(function (i) { return typeof i == "string"; });
    if (rawExpectedArr.length == unionErrors.length) {
        var expected = array_util_1.removeDuplicateElements(rawExpectedArr)
            .map(function (str) { return "(" + str + ")"; })
            .join(" or ");
        return make_mapping_error_1.makeMappingError({
            message: name + " must be " + expected + "; received " + type_util_1.toTypeStr(mixed),
            inputName: name,
            actualValue: mixed,
            expected: expected,
            expectedMeta: {
                mappableValues: (everyElementHasMappableValues(unionErrors) ?
                    unionErrors.reduce(function (memo, err) {
                        memo.push.apply(memo, err.expectedMeta.mappableValues);
                        return memo;
                    }, []) :
                    undefined),
                outputValues: (everyElementHasOutputValues(unionErrors) ?
                    unionErrors.reduce(function (memo, err) {
                        memo.push.apply(memo, err.expectedMeta.outputValues);
                        return memo;
                    }, []) :
                    undefined),
            },
            unionErrors: unionErrors,
        });
    }
    else {
        /**
         * At least one of our mappers did not throw
         * a `MappingError`
         */
        var errorMessages = array_util_1.removeDuplicateElements(unionErrors
            .map(function (e) { return indent_error_message_1.indentErrorMessage(e.message); })).map(function (str) { return "(" + str + ")"; });
        var expected = array_util_1.removeDuplicateElements(rawExpectedArr.concat(["valid value"]))
            .map(function (str) { return "(" + str + ")"; })
            .join(" or ");
        return make_mapping_error_1.makeMappingError({
            message: name + " is invalid.\n" + errorMessages.join(" or\n"),
            inputName: name,
            actualValue: mixed,
            expected: expected,
            unionErrors: unionErrors,
        });
    }
}
exports.makeNormalizedUnionError = makeNormalizedUnionError;
//# sourceMappingURL=make-normalized-union-error.js.map