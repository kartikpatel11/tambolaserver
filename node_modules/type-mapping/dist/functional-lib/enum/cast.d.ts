import { Enum, EnumKey, EnumValue } from "../../enum-util";
import { SafeMapper } from "../../mapper";
import { ExpectedInput } from "../../mapper";
import { MappableInput } from "../../mapper";
export declare type ToEnumValueMapper<E extends typeof Enum> = (SafeMapper<EnumValue<E>> & ExpectedInput<EnumValue<E>> & MappableInput<EnumValue<E> | EnumKey<E>>);
export declare function toEnumValue<E extends typeof Enum>(e: E): (ToEnumValueMapper<E>);
export declare type ToEnumKeyMapper<E extends typeof Enum> = (SafeMapper<EnumKey<E>> & ExpectedInput<EnumKey<E>> & MappableInput<EnumValue<E> | EnumKey<E>>);
export declare function toEnumKey<E extends typeof Enum>(e: E): (ToEnumKeyMapper<E>);
export declare type ToOneEnumValueMapper<E extends typeof Enum, K extends EnumKey<E>> = (SafeMapper<E[K]> & ExpectedInput<E[K]> & MappableInput<E[K] | K>);
export declare function toOneEnumValue<E extends typeof Enum, K extends EnumKey<E>>(e: E, k: K): (ToOneEnumValueMapper<E, K>);
export declare type ToOneEnumKeyMapper<E extends typeof Enum, K extends EnumKey<E>> = (SafeMapper<K> & ExpectedInput<K> & MappableInput<E[K] | K>);
export declare function toOneEnumKey<E extends typeof Enum, K extends EnumKey<E>>(e: E, k: K): (ToOneEnumKeyMapper<E, K>);
//# sourceMappingURL=cast.d.ts.map