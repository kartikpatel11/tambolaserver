import { AnySafeMapper, SafeMapper, OutputOf, ExpectedInputOf, MappableInputOf, ExpectedInput, MappableInput, ExtractRunTimeModifierOrUnknown, IsOptional, IsExpectedInputOptional } from "../../mapper";
/**
    Use with `and()` or `deepMerge()`

    Derives property `dstKey` from `srcKey`.

    Example 1,

    ```ts
    const f = tm.derive("x", "y", tm.stringToUnsignedInteger())

    f("obj", { x : "34" })              //Gives us { y : 34 }
    f("obj", { y : "34" })              //Error; expected `x`
    f("obj", { x : "34", y : "99" })    //Gives us { y : 34 }
    f("obj", { })                       //Error; expected `x`
    f("obj", { x : undefined })         //Error; expected `x` to be `string|number`
    f("obj", { y : undefined })         //Error; expected `x`
    ```

    Example 2,

    ```ts
    const f = tm.derive("x", "y", tm.optional(tm.stringToUnsignedInteger()))

    f("obj", { x : "34" })              //Gives us { y : 34 }
    f("obj", { y : "34" })              //Gives us { y : undefined }
    f("obj", { x : "34", y : "99" })    //Gives us { y : 34 }
    f("obj", { })                       //Gives us { y : undefined }
    f("obj", { x : undefined })         //Gives us { y : undefined }
    f("obj", { y : undefined })         //Gives us { y : undefined }
    ```

    Example 3,

    ```ts
    const f = tm.derive("x", "y", tm.orUndefined(tm.stringToUnsignedInteger()))

    f("obj", { x : "34" })              //Gives us { y : 34 }
    f("obj", { y : "34" })              //Error; expected `x`
    f("obj", { x : "34", y : "99" })    //Gives us { y : 34 }
    f("obj", { })                       //Error; expected `x`
    f("obj", { x : undefined })         //Gives us { y : undefined }
    f("obj", { y : undefined })         //Error; expected `x`
    ```

    ```ts
    //derive<>() can be used while keeping the old field,
    const f = tm.deepMerge(
        tm.object({
            x : tm.unsignedIntegerString()
        }),
        tm.derive("x", "y", tm.stringToUnsignedInteger())
    );
    ```

*/
export declare type DeriveMapper<SrcKeyT extends string, DstKeyT extends string, F extends AnySafeMapper> = (SafeMapper<{
    [dst in DstKeyT]: OutputOf<F>;
}> & ExpectedInput<IsExpectedInputOptional<F> extends true ? {
    [src in SrcKeyT]?: ExpectedInputOf<F>;
} : {
    [src in SrcKeyT]: ExpectedInputOf<F>;
}> & MappableInput<IsOptional<F> extends true ? {
    [src in SrcKeyT]?: MappableInputOf<F>;
} : {
    [src in SrcKeyT]: MappableInputOf<F>;
}> & ExtractRunTimeModifierOrUnknown<F>);
export declare function derive<SrcKeyT extends string, DstKeyT extends string, F extends AnySafeMapper>(srcKey: SrcKeyT, dstKey: DstKeyT, f: F): (DeriveMapper<SrcKeyT, DstKeyT, F>);
//# sourceMappingURL=derive.d.ts.map