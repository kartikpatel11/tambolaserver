"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var functional_lib_1 = require("../../functional-lib");
var fluent_lib_1 = require("../../fluent-lib");
var type_util_1 = require("../../type-util");
var FixedPointUtil = require("../../fixed-point-util");
var BigIntUtil = require("../../bigint-util");
var error_util_1 = require("../../error-util");
var error_code_1 = require("../../error-code");
/**
 *
 * For now, returns a string.
 * Converting to a number risks losing precision.
 *
 * @deprecated
 */
function decimalDeprecated() {
    return fluent_lib_1.pipe(functional_lib_1.or(functional_lib_1.string(), functional_lib_1.finiteNumber(), functional_lib_1.bigInt()), function (_name, mixed) {
        return mixed.toString();
    }, functional_lib_1.floatingPointFormatString());
}
exports.decimalDeprecated = decimalDeprecated;
function assertValidDecimalPrecisionAndScale(
/**
 * + Min precision is `1`, even though MySQL allows min precision `0`.
 *   Precision `0` is not very meaningful, anyway, right?
 */
precision, 
/**
 * + The min scale is `0`.
 * + `scale` must be <= `precision`.
 */
scale) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    var precisionMapper = fluent_lib_1.pipe(functional_lib_1.toBigInt(), functional_lib_1.bigIntGtEq(BigInt(1)));
    precision = precisionMapper("precision", precision);
    var scaleMapper = fluent_lib_1.pipe(functional_lib_1.toBigInt(), functional_lib_1.bigIntGtEq(BigInt(0)), functional_lib_1.bigIntLtEq(precision));
    scale = scaleMapper("scale", scale);
    return {
        precision: precision,
        scale: scale,
    };
}
function decimal(precision, scale) {
    if (precision == undefined) {
        return decimalDeprecated();
    }
    var _a = assertValidDecimalPrecisionAndScale(precision, scale), maxPrecision = _a.precision, maxScale = _a.scale;
    var expected = "DECIMAL(" + maxPrecision + ", " + maxScale + ")";
    return fluent_lib_1.pipe(functional_lib_1.or(functional_lib_1.string(), functional_lib_1.finiteNumber(), functional_lib_1.bigInt()), function (_name, mixed) {
        return mixed.toString();
    }, function (name, str) {
        var parsed = FixedPointUtil.tryParse(str);
        if (parsed == undefined) {
            throw error_util_1.makeMappingError({
                message: name + " must be " + expected,
                inputName: name,
                actualValue: str,
                expected: expected,
            });
        }
        var curScale = (parsed.getFixedPointFractionalPartString() == "0" ?
            0 :
            parsed.getFixedPointFractionalPartString().length);
        var curPrecision = (curScale +
            (parsed.getFixedPointIntegerPartString() == "0" ?
                0 :
                parsed.getFixedPointIntegerPartString().length));
        if (BigIntUtil.greaterThan(curPrecision, maxPrecision)) {
            throw error_util_1.makeMappingError({
                message: name + " must have precision less than, or equal to " + maxPrecision,
                inputName: name,
                actualValue: parsed.getFixedPointString(),
                expected: expected,
                expectedMeta: {
                    errorCode: error_code_1.ErrorCode.EXPECTED_DECIMAL_PRECISION_LESS_THAN_OR_EQUAL_TO,
                    maxPrecision: maxPrecision,
                    maxScale: maxScale,
                    curPrecision: curPrecision,
                    curScale: curScale,
                },
            });
        }
        if (BigIntUtil.greaterThan(curScale, maxScale)) {
            throw error_util_1.makeMappingError({
                message: name + " must have scale less than, or equal to " + maxScale,
                inputName: name,
                actualValue: parsed.getFixedPointString(),
                expected: expected,
                expectedMeta: {
                    errorCode: error_code_1.ErrorCode.EXPECTED_DECIMAL_SCALE_LESS_THAN_OR_EQUAL_TO,
                    maxPrecision: maxPrecision,
                    maxScale: maxScale,
                    curPrecision: curPrecision,
                    curScale: curScale,
                },
            });
        }
        return parsed.getFixedPointString();
    });
}
exports.decimal = decimal;
//# sourceMappingURL=index.js.map