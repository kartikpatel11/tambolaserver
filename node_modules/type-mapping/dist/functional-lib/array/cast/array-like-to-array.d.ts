import { SafeMapper, AnySafeMapper, OutputOf, ExpectedInput, MappableInput, ExpectedInputOf, MappableInputOf, ExtractRunTimeModifierOrUnknown } from "../../../mapper";
export declare type ArrayLikeToArrayMapper<F extends AnySafeMapper> = (SafeMapper<OutputOf<F>[]> & ExpectedInput<ExpectedInputOf<F>[]> & MappableInput<ArrayLike<MappableInputOf<F>>> & ExtractRunTimeModifierOrUnknown<F>);
export declare function arrayLikeToArray<F extends AnySafeMapper>(f: F): (ArrayLikeToArrayMapper<F>);
export declare type ArrayLikeToReadOnlyArrayMapper<F extends AnySafeMapper> = (SafeMapper<readonly OutputOf<F>[]> & ExpectedInput<readonly ExpectedInputOf<F>[]> & MappableInput<ArrayLike<MappableInputOf<F>>> & ExtractRunTimeModifierOrUnknown<F>);
export declare function arrayLikeToReadOnlyArray<F extends AnySafeMapper>(f: F): (ArrayLikeToReadOnlyArrayMapper<F>);
//# sourceMappingURL=array-like-to-array.d.ts.map