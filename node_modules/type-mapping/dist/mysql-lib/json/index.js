"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fluent_lib_1 = require("../../fluent-lib");
var functional_lib_1 = require("../../functional-lib");
function jsonDelegate(dataTypeStr, maxLength, defaultDesiredLengthMax) {
    if (maxLength < defaultDesiredLengthMax) {
        throw new Error("maxLength must be >= defaultDesiredLengthMax");
    }
    var result = function (a, b) {
        if (a == undefined) {
            return fluent_lib_1.stringLength({
                max: defaultDesiredLengthMax,
            }).pipe(functional_lib_1.jsonObjectString());
        }
        else if (b == undefined) {
            a = fluent_lib_1.pipe(fluent_lib_1.integer(), fluent_lib_1.range({
                gtEq: 1,
                ltEq: maxLength,
            }))(dataTypeStr + ".desiredLengthMax", a);
            return fluent_lib_1.stringLength({
                max: a,
            }).pipe(functional_lib_1.jsonObjectString());
        }
        else {
            a = fluent_lib_1.pipe(fluent_lib_1.integer(), fluent_lib_1.range({
                gtEq: 0,
                ltEq: maxLength,
            }))(dataTypeStr + ".desiredLengthMin", a);
            b = fluent_lib_1.pipe(fluent_lib_1.integer(), fluent_lib_1.range({
                gtEq: 1,
                ltEq: maxLength,
            }))(dataTypeStr + ".desiredLengthMax", b);
            if (a > b) {
                throw new Error(dataTypeStr + " minLength must be <= maxLength");
            }
            return fluent_lib_1.stringLength({
                min: a,
                max: b,
            }).pipe(functional_lib_1.jsonObjectString());
        }
    };
    result.maxLength = maxLength;
    return result;
}
/**
 * The space required to store a `JSON` document is roughly
 * the same as for `LONGBLOB` or `LONGTEXT`.
 *
 * In addition, MySQL imposes a limit on the size of any `JSON`
 * document stored in a `JSON` column such that it cannot be any
 * larger than the value of `max_allowed_packet`.
 *
 * The default for `max_allowed_packet` is `4194304`, 4MB.
 *
 * The maximum is `1073741824`, 1GB.
 *
 * The value should be a multiple of `1024`;
 * nonmultiples are rounded down to the nearest multiple.
 *
 * -----
 *
 * I set the default to 1MB arbitrarily.
*/
exports.json = jsonDelegate("JSON", 4294967295, 1048576);
//# sourceMappingURL=index.js.map