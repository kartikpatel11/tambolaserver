import { SafeMapperMap, NonOptionalExpectedInputKey, OptionalExpectedInputKey, NonOptionalMappableInputKey, OptionalMappableInputKey } from "../../field-map";
import { SafeMapper, OutputOf, ExpectedInput, ExpectedInputOf, MappableInput, MappableInputOf } from "../../mapper";
/**
    https://github.com/microsoft/TypeScript/issues/31992#issuecomment-503816806
    We use this no-op `_` type as a hack to get the tooltip to give
    us a "better-looking" type
*/
declare type _<T> = T;
declare type OutputType<MapT extends SafeMapperMap, K extends keyof MapT = Extract<keyof MapT, string>> = (_<{
    [name in K]: (OutputOf<MapT[name]>);
}>);
export declare type ObjectFromMapMapper<MapT extends SafeMapperMap> = (SafeMapper<OutputType<MapT>> & ExpectedInput<(NonOptionalExpectedInputKey<MapT> extends never ? unknown : {
    [name in NonOptionalExpectedInputKey<MapT>]: (ExpectedInputOf<MapT[name]>);
}) & (OptionalExpectedInputKey<MapT> extends never ? unknown : {
    [name in OptionalExpectedInputKey<MapT>]?: (ExpectedInputOf<MapT[name]>);
})> & MappableInput<(NonOptionalMappableInputKey<MapT> extends never ? unknown : {
    [name in NonOptionalMappableInputKey<MapT>]: (MappableInputOf<MapT[name]>);
}) & (OptionalMappableInputKey<MapT> extends never ? unknown : {
    [name in OptionalMappableInputKey<MapT>]?: (MappableInputOf<MapT[name]>);
})>);
/**
    Always returns a new object.

    If the input contains additional fields not part
    of the map, they will not be in the new object.
*/
export declare function objectFromMap<MapT extends SafeMapperMap>(map: MapT): (ObjectFromMapMapper<MapT>);
export {};
//# sourceMappingURL=object-from-map.d.ts.map