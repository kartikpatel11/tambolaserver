export declare enum Enum {
}
export declare type EnumElement = string | number;
export declare type EnumKey<E extends typeof Enum> = ({
    [k in Extract<keyof E, string>]: (E[k] extends EnumElement ? k : never);
}[Extract<keyof E, string>]);
export declare function getKeys<E extends typeof Enum>(e: E): EnumKey<E>[];
export declare type EnumValue<E extends typeof Enum> = (Extract<E[EnumKey<E>], EnumElement>);
export declare function getValues<E extends typeof Enum>(e: E): EnumValue<E>[];
export declare type EnumEntry<E extends typeof Enum> = ({
    [k in Extract<keyof E, string>]: (E[k] extends EnumElement ? {
        key: k;
        value: E[k];
    } : never);
}[Extract<keyof E, string>]);
export declare function getEntries<E extends typeof Enum>(e: E): EnumEntry<E>[];
//# sourceMappingURL=index.d.ts.map