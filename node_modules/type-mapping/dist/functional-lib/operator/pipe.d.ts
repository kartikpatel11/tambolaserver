import { AnyMapper, SafeMapper, AnySafeMapper, OutputOf, ExtractExpectedInputOrUnknown, ExpectedInputOf, ExpectedInput, AssertPipeable, MappableInput, MappableInputOf, ExtractRunTimeModifierOrUnknown } from "../../mapper";
import { Primitive } from "../../primitive";
export declare type PipeMapper<SrcF extends AnySafeMapper, DstF extends AnyMapper> = (SafeMapper<OutputOf<DstF>> & (ExpectedInputOf<DstF> extends ExpectedInputOf<SrcF> ? (Exclude<ExpectedInputOf<SrcF>, Primitive> extends Exclude<ExpectedInputOf<DstF>, Primitive> ? ExpectedInput<ExpectedInputOf<DstF>> : ExtractExpectedInputOrUnknown<SrcF>) : ExtractExpectedInputOrUnknown<SrcF>) & MappableInput<MappableInputOf<SrcF>> & ExtractRunTimeModifierOrUnknown<SrcF>);
export declare function pipe<F0 extends AnySafeMapper, F1 extends AnyMapper>(f0: F0, f1: AssertPipeable<F0, F1>): (PipeMapper<F0, F1>);
export declare function pipe<F0 extends AnySafeMapper, F1 extends AnyMapper, F2 extends AnyMapper>(f0: F0, f1: AssertPipeable<F0, F1>, f2: AssertPipeable<F1, F2>): (PipeMapper<F0, F2>);
export declare function pipe<F0 extends AnySafeMapper, F1 extends AnyMapper, F2 extends AnyMapper, F3 extends AnyMapper>(f0: F0, f1: AssertPipeable<F0, F1>, f2: AssertPipeable<F1, F2>, f3: AssertPipeable<F2, F3>): (PipeMapper<F0, F3>);
export declare function pipe<F0 extends AnySafeMapper, F1 extends AnyMapper, F2 extends AnyMapper, F3 extends AnyMapper, F4 extends AnyMapper>(f0: F0, f1: AssertPipeable<F0, F1>, f2: AssertPipeable<F1, F2>, f3: AssertPipeable<F2, F3>, f4: AssertPipeable<F3, F4>): (PipeMapper<F0, F4>);
export declare function pipe<F0 extends AnySafeMapper, F1 extends AnyMapper, F2 extends AnyMapper, F3 extends AnyMapper, F4 extends AnyMapper, F5 extends AnyMapper>(f0: F0, f1: AssertPipeable<F0, F1>, f2: AssertPipeable<F1, F2>, f3: AssertPipeable<F2, F3>, f4: AssertPipeable<F3, F4>, f5: AssertPipeable<F4, F5>): (PipeMapper<F0, F5>);
export declare function pipe<F0 extends AnySafeMapper, F1 extends AnyMapper, F2 extends AnyMapper, F3 extends AnyMapper, F4 extends AnyMapper, F5 extends AnyMapper, F6 extends AnyMapper>(f0: F0, f1: AssertPipeable<F0, F1>, f2: AssertPipeable<F1, F2>, f3: AssertPipeable<F2, F3>, f4: AssertPipeable<F3, F4>, f5: AssertPipeable<F4, F5>, f6: AssertPipeable<F5, F6>): (PipeMapper<F0, F6>);
export declare type UnsafePipeMapper<SrcF extends AnySafeMapper> = (SafeMapper<unknown> & ExpectedInput<ExpectedInputOf<SrcF>> & MappableInput<MappableInputOf<SrcF>> & ExtractRunTimeModifierOrUnknown<SrcF>);
export declare function unsafePipe<SrcF extends AnySafeMapper, ArrT extends AnyMapper[]>(f: SrcF, ...arr: ArrT): (UnsafePipeMapper<SrcF>);
export declare function reallyUnsafePipe<ArrT extends AnyMapper[]>(...arr: ArrT): SafeMapper<unknown>;
//# sourceMappingURL=pipe.d.ts.map