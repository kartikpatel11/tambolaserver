"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("../../mapper");
var type_util_1 = require("../../type-util");
var error_util_1 = require("../../error-util");
var array_util_1 = require("../../array-util");
function excludeLiteral(f) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    var literalStrArr = arr.map(function (value) { return type_util_1.toLiteralStr(value); });
    return mapper_1.copyRunTimeModifier(f, function (name, mixed) {
        var mapResult = mapper_1.tryMapHandled(f, name, mixed);
        if (mapResult.success) {
            var value = mapResult.value;
            for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                var item = arr_1[_i];
                if (type_util_1.strictEqual(value, item)) {
                    throw error_util_1.makeMappingError({
                        message: name + " must not be " + type_util_1.toLiteralUnionStr(arr) + "; received " + type_util_1.toLiteralStr(item),
                        inputName: name,
                        actualValue: value,
                        expected: "not " + type_util_1.toLiteralUnionStr(arr),
                    });
                }
            }
            return value;
        }
        var rawUnionErrors = mapResult.mappingError.unionErrors;
        if (rawUnionErrors == undefined) {
            throw mapResult.mappingError;
        }
        var unionErrors = rawUnionErrors.filter(function (err) { return (err.expected != undefined &&
            literalStrArr.indexOf(err.expected) < 0); });
        var rawExpectedArr = unionErrors
            .map(function (e) { return e.expected; })
            .filter(function (s) { return s != undefined; });
        if (rawExpectedArr.length != unionErrors.length) {
            throw mapResult.mappingError;
        }
        /**
         * @todo Add checks for zero-length errors elsewhere in the code base, too
         */
        if (rawExpectedArr.length == 0) {
            throw error_util_1.makeMappingError({
                message: name + " must be never; received " + type_util_1.toTypeStr(mixed),
                inputName: name,
                actualValue: mixed,
                expected: "never",
                unionErrors: unionErrors,
            });
        }
        else if (rawExpectedArr.length == 1) {
            var expected = rawExpectedArr[0];
            throw error_util_1.makeMappingError({
                message: name + " must be " + expected + "; received " + type_util_1.toTypeStr(mixed),
                inputName: name,
                actualValue: mixed,
                expected: expected,
                expectedMeta: {
                    mappableValues: ((mapResult.mappingError.expectedMeta == undefined ||
                        mapResult.mappingError.expectedMeta.mappableValues == undefined) ?
                        undefined :
                        mapResult.mappingError.expectedMeta.mappableValues.filter(function (mappableValue) { return !arr.some(function (i) { return type_util_1.strictEqual(i, mappableValue); }); })),
                    outputValues: ((mapResult.mappingError.expectedMeta == undefined ||
                        mapResult.mappingError.expectedMeta.outputValues == undefined) ?
                        undefined :
                        mapResult.mappingError.expectedMeta.outputValues.filter(function (outputValue) { return !arr.some(function (i) { return type_util_1.strictEqual(i, outputValue); }); })),
                },
            });
        }
        else {
            var expected = array_util_1.removeDuplicateElements(rawExpectedArr)
                .map(function (str) { return "(" + str + ")"; })
                .join(" or ");
            throw error_util_1.makeMappingError({
                message: name + " must be " + expected + "; received " + type_util_1.toTypeStr(mixed),
                inputName: name,
                actualValue: mixed,
                expected: expected,
                expectedMeta: {
                    mappableValues: ((mapResult.mappingError.expectedMeta == undefined ||
                        mapResult.mappingError.expectedMeta.mappableValues == undefined) ?
                        undefined :
                        mapResult.mappingError.expectedMeta.mappableValues.filter(function (mappableValue) { return !arr.some(function (i) { return type_util_1.strictEqual(i, mappableValue); }); })),
                    outputValues: ((mapResult.mappingError.expectedMeta == undefined ||
                        mapResult.mappingError.expectedMeta.outputValues == undefined) ?
                        undefined :
                        mapResult.mappingError.expectedMeta.outputValues.filter(function (outputValue) { return !arr.some(function (i) { return type_util_1.strictEqual(i, outputValue); }); })),
                },
                unionErrors: unionErrors,
            });
        }
    });
}
exports.excludeLiteral = excludeLiteral;
//# sourceMappingURL=exclude-literal.js.map