import { AnySafeMapper, SafeMapper, Name, OutputOf, ExpectedInputOfImpl, MappableInputOfImpl, ExpectedInput, MappableInput } from "../../mapper";
declare type ExtractLiteralName<F extends AnySafeMapper & Name<string>> = (F extends any ? (string extends F["__name"] ? never : F["__name"]) : never);
export declare type PartialObjectFromArrayMapper<ArrT extends (AnySafeMapper & Name<string>)[]> = (SafeMapper<{
    [name in ExtractLiteralName<ArrT[number]>]: (OutputOf<Extract<ArrT[number], Name<name>>> | undefined);
} & (string extends ArrT[number]["__name"] ? {
    [name: string]: (OutputOf<Exclude<ArrT[number], Name<ExtractLiteralName<ArrT[number]>>>> | undefined);
} : unknown)> & ExpectedInput<{
    [name in ExtractLiteralName<ArrT[number]>]?: (ExpectedInputOfImpl<Extract<ArrT[number], Name<name>>>[0] | undefined);
} & (string extends ArrT[number]["__name"] ? {
    [name: string]: (ExpectedInputOfImpl<Exclude<ArrT[number], Name<ExtractLiteralName<ArrT[number]>>>>[0] | undefined);
} : unknown)> & MappableInput<{
    [name in ExtractLiteralName<ArrT[number]>]?: (MappableInputOfImpl<Extract<ArrT[number], Name<name>>>[0] | undefined);
} & (string extends ArrT[number]["__name"] ? {
    [name: string]: (MappableInputOfImpl<Exclude<ArrT[number], Name<ExtractLiteralName<ArrT[number]>>>>[0] | undefined);
} : unknown)>);
/**
    This,
    ```ts
    objectFromArray(
        withName(unsignedInteger(), "foo"),
        withName(string(), "foo")
    );
    ```

    Is the same as,
    ```ts
    objectFromArray(
        withName(or(
            unsignedInteger(),
            string()
        ), "foo")
    );
    ```
*/
export declare function partialObjectFromArray<ArrT extends (AnySafeMapper & Name<string>)[]>(...arr: ArrT): (PartialObjectFromArrayMapper<ArrT>);
export {};
//# sourceMappingURL=partial-object-from-array.d.ts.map