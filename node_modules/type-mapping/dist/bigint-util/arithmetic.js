"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_util_1 = require("../type-util");
var jsbi_1 = require("./jsbi");
function add(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) + BigInt(b);
            }
            else {
                return BigInt(a) + b;
            }
        }
        else {
            if (typeof b == "number") {
                return a + BigInt(b);
            }
            else {
                return a + b;
            }
        }
    }
    var result = jsbi_1.JSBI.add(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.add = add;
function addMany(a, b) {
    var rest = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
    }
    var result = add(a, b);
    for (var _a = 0, rest_1 = rest; _a < rest_1.length; _a++) {
        var ele = rest_1[_a];
        result = add(result, ele);
    }
    return result;
}
exports.addMany = addMany;
function sub(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) - BigInt(b);
            }
            else {
                return BigInt(a) - b;
            }
        }
        else {
            if (typeof b == "number") {
                return a - BigInt(b);
            }
            else {
                return a - b;
            }
        }
    }
    var result = jsbi_1.JSBI.subtract(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.sub = sub;
function mul(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) * BigInt(b);
            }
            else {
                return BigInt(a) * b;
            }
        }
        else {
            if (typeof b == "number") {
                return a * BigInt(b);
            }
            else {
                return a * b;
            }
        }
    }
    var result = jsbi_1.JSBI.multiply(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.mul = mul;
function div(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) / BigInt(b);
            }
            else {
                return BigInt(a) / b;
            }
        }
        else {
            if (typeof b == "number") {
                return a / BigInt(b);
            }
            else {
                return a / b;
            }
        }
    }
    var result = jsbi_1.JSBI.divide(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.div = div;
function mod(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) % BigInt(b);
            }
            else {
                return BigInt(a) % b;
            }
        }
        else {
            if (typeof b == "number") {
                return a % BigInt(b);
            }
            else {
                return a % b;
            }
        }
    }
    var result = jsbi_1.JSBI.remainder(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.mod = mod;
//# sourceMappingURL=arithmetic.js.map