"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_util_1 = require("../type-util");
var jsbi_1 = require("./jsbi");
function leftShift(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) << BigInt(b);
            }
            else {
                return BigInt(a) << b;
            }
        }
        else {
            if (typeof b == "number") {
                return a << BigInt(b);
            }
            else {
                return a << b;
            }
        }
    }
    var result = jsbi_1.JSBI.leftShift(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.leftShift = leftShift;
function signedRightShift(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) >> BigInt(b);
            }
            else {
                return BigInt(a) >> b;
            }
        }
        else {
            if (typeof b == "number") {
                return a >> BigInt(b);
            }
            else {
                return a >> b;
            }
        }
    }
    var result = jsbi_1.JSBI.signedRightShift(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.signedRightShift = signedRightShift;
function bitwiseAnd(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) & BigInt(b);
            }
            else {
                return BigInt(a) & b;
            }
        }
        else {
            if (typeof b == "number") {
                return a & BigInt(b);
            }
            else {
                return a & b;
            }
        }
    }
    var result = jsbi_1.JSBI.bitwiseAnd(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.bitwiseAnd = bitwiseAnd;
function bitwiseOr(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) | BigInt(b);
            }
            else {
                return BigInt(a) | b;
            }
        }
        else {
            if (typeof b == "number") {
                return a | BigInt(b);
            }
            else {
                return a | b;
            }
        }
    }
    var result = jsbi_1.JSBI.bitwiseOr(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.bitwiseOr = bitwiseOr;
function bitwiseXor(a, b) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            if (typeof b == "number") {
                return BigInt(a) ^ BigInt(b);
            }
            else {
                return BigInt(a) ^ b;
            }
        }
        else {
            if (typeof b == "number") {
                return a ^ BigInt(b);
            }
            else {
                return a ^ b;
            }
        }
    }
    var result = jsbi_1.JSBI.bitwiseXor(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
    return BigInt(result.toString());
}
exports.bitwiseXor = bitwiseXor;
function bitwiseNot(a) {
    var BigInt = type_util_1.getBigIntFactoryFunctionOrError();
    if (type_util_1.isBigIntNativelySupported()) {
        if (typeof a == "number") {
            return ~BigInt(a);
        }
        else {
            return ~a;
        }
    }
    var result = jsbi_1.JSBI.bitwiseNot(jsbi_1.JSBI.BigInt(a.toString()));
    return BigInt(result.toString());
}
exports.bitwiseNot = bitwiseNot;
//# sourceMappingURL=bitwise-operation.js.map