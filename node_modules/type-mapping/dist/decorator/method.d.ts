import { AnySafeMapper, OutputOf } from "../mapper";
import { ToRequiredParameters } from "./to-required-parameters";
export declare type ExtractKeyWithParams<ObjT, ArgsT extends AnySafeMapper[]> = ({
    [k in Extract<keyof ObjT, string | symbol>]: (({
        [index in keyof ArgsT]: OutputOf<Extract<ArgsT[index], AnySafeMapper>>;
    }) extends (ToRequiredParameters<Extract<ObjT[k], (...args: any[]) => any>>) ? ((ToRequiredParameters<Extract<ObjT[k], (...args: any[]) => any>>) extends ({
        [index in keyof ArgsT]: OutputOf<Extract<ArgsT[index], AnySafeMapper>>;
    }) ? k : never) : never);
}[Extract<keyof ObjT, string | symbol>]);
export declare type MethodDecorator<ArgsT extends AnySafeMapper[]> = (<ObjT, K extends keyof ObjT>(target: ObjT, propertyKey: (K extends ExtractKeyWithParams<ObjT, ArgsT> ? K : [K, "has parameters of type", Parameters<Extract<ObjT[K], (...args: any[]) => any>>, "not exactly", {
    [index in keyof ArgsT]: OutputOf<Extract<ArgsT[index], AnySafeMapper>>;
}]), descriptor: TypedPropertyDescriptor<ObjT[K]>) => void);
export declare function method<ArgsT extends AnySafeMapper[]>(...mappers: ArgsT): (MethodDecorator<ArgsT>);
//# sourceMappingURL=method.d.ts.map