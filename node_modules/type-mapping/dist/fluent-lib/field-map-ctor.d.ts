import { SafeMapperMap } from "../field-map";
import { WithName } from "../mapper";
import { FluentMapper } from "../fluent-mapper";
/**
    https://github.com/microsoft/TypeScript/issues/31992#issuecomment-503816806
    We use this no-op `_` type as a hack to get the tooltip to give
    us a "better-looking" type
*/
declare type _<T> = T;
declare type OutputType<MapT extends SafeMapperMap, K extends keyof MapT = Extract<keyof MapT, string>> = (_<{
    [name in K]: (FluentMapper<WithName<MapT[name], Extract<name, string>>>);
}>);
/**
    Maps each `Mapper<>` to a `Field<>`,
    that is also a `FluentMapper<>`
*/
export declare type ToFluentFieldMap<MapT extends SafeMapperMap> = OutputType<MapT>;
/**
    Constructs multiple `Field<>` instances at once,
    that are also `FluentMapper<>` instances
*/
export declare function fields<MapT extends SafeMapperMap>(map: MapT): (ToFluentFieldMap<MapT>);
export {};
//# sourceMappingURL=field-map-ctor.d.ts.map