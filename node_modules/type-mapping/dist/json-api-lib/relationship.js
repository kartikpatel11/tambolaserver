"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fLib = require("../fluent-lib");
var partial_relationship_1 = require("./partial-relationship");
var link_collection_1 = require("./link-collection");
var resource_linkage_1 = require("./resource-linkage");
var meta_1 = require("./meta");
/**
 * https://jsonapi.org/format/1.0/#document-resource-object-relationships
 *
 * The value of the `relationships` key **MUST** be an object (a “relationships object”).
 * Members of the relationships object (“relationships”) represent references from the resource object
 * in which it’s defined to other resource objects.
 *
 * Relationships may be to-one or to-many.
 *
 * A “relationship object” **MUST** contain at least one of the following:
 *
 * + `links`: a links object containing at least one of the following:
 *   + `self`: a link for the relationship itself (a “relationship link”).
 *     This link allows the client to directly manipulate the relationship.
 *     For example, removing an `author` through an `article`’s relationship URL would disconnect
 *     the person from the `article` without deleting the `people` resource itself.
 *     When fetched successfully, this link returns the linkage for the related resources as its primary data.
 *     (See Fetching Relationships.)
 *   + `related`: a related resource link
 * + `data`: resource linkage
 * + `meta`: a meta object that contains non-standard meta-information about the relationship.
 *
 * A relationship object that represents a to-many relationship **MAY** also contain pagination links
 * under the `links` member, as described below.
 * Any pagination links in a relationship object **MUST** paginate the relationship data, not the related resources.
 *
 *  @see {@link partialRelationship}
 *  @see {@link Relationship}
 *  @see {@link ExpectedInputRelationship}
 */
exports.relationship = function () { return fLib.deepMerge(partial_relationship_1.partialRelationship(), fLib.or(fLib.object({ links: link_collection_1.linkCollection() }), fLib.object({ data: resource_linkage_1.resourceLinkage() }), fLib.object({ meta: meta_1.meta() }))); };
//# sourceMappingURL=relationship.js.map