import { AnyMapper, Mapper } from "../mapper";
import { ExtractOptionalOrUnknown } from "./extract-optional-or-unknown";
import { OutputOf, HandledInputOf } from "../query";
import { ExtractExpectedInputOrUnknown } from "./extract-expected-input-or-unknown";
import { ExtractMappableInputOrUnknown } from "./extract-mappable-input-or-unknown";
import { ExtractRunTimeRequiredOrUnknown } from "./extract-run-time-required-or-unknown";
import { Name } from "../name";
export declare type WithName<F extends AnyMapper, NameT extends string> = (Mapper<HandledInputOf<F>, OutputOf<F>> & ExtractExpectedInputOrUnknown<F> & ExtractMappableInputOrUnknown<F> & ExtractOptionalOrUnknown<F> & ExtractRunTimeRequiredOrUnknown<F> & (string extends NameT ? unknown : Name<NameT>));
/**
    Lets you modify the `Name<>` of a `Mapper<>`.

    Returns a new `Mapper<>`.
*/
export declare function withName<F extends AnyMapper, NameT extends string>(f: F, name: NameT): (WithName<F, NameT>);
//# sourceMappingURL=with-name.d.ts.map