import * as tm from "type-mapping";
import { RouteData, Route } from "../route";
import { SetQuery } from "./set-query";
export declare type DeepMergeQuery<DataT extends RouteData, F extends tm.AnySafeMapper> = (undefined extends DataT["query"] ? SetQuery<DataT, F> : Route<{
    readonly method: DataT["method"];
    readonly path: DataT["path"];
    readonly param: DataT["param"];
    readonly query: tm.DeepMergeMapper<Exclude<DataT["query"], undefined>, [F]>;
    readonly body: DataT["body"];
    readonly header: DataT["header"];
    readonly response: DataT["response"];
}>);
/**
    Your query mapper should handle the following types,
    `string|(string[])|undefined`
*/
export declare function deepMergeQuery<DataT extends RouteData, F extends tm.AnySafeMapper>(data: DataT, f: F): DeepMergeQuery<DataT, F>;
//# sourceMappingURL=deep-merge-query.d.ts.map