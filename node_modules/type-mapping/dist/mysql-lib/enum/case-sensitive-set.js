"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fluent_lib_1 = require("../../fluent-lib");
var error_util_1 = require("../../error-util");
var type_util_1 = require("../../type-util");
/**
    TODO Handle case-insensitive set collations

    -----

    https://dev.mysql.com/doc/refman/5.5/en/set.html

    When retrieved, values stored in a SET column are displayed using the lettercase
    that was used in the column definition.

    Note that SET columns can be assigned a character set and collation.

    For binary or case-sensitive collations,
    lettercase is taken into account when assigning values to the column.
*/
function caseSenstiveSet() {
    var elements = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    if (elements.length > 64) {
        throw new Error("SET type can only have up to 64 elements");
    }
    fluent_lib_1.array(fluent_lib_1.notMatch(/\,/, function (name) { return name + " must not have comma"; }))("elements", elements);
    var expected = "SET(" + elements.map(function (e) { return type_util_1.toLiteralOrTypeStr(e); }).join(",") + ")";
    return fluent_lib_1.string().pipe(function (name, raw) {
        var arr = raw.split(",");
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var e = arr_1[_i];
            if (elements.indexOf(e) < 0) {
                throw error_util_1.makeMappingError({
                    message: name + " has unknown set element; " + e,
                    inputName: name,
                    actualValue: e,
                    expected: expected,
                });
            }
        }
        return raw;
    });
}
exports.caseSenstiveSet = caseSenstiveSet;
//# sourceMappingURL=case-sensitive-set.js.map