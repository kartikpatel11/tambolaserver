import { SafeMapper, OutputOf, ExpectedInput, MappableInput, ExpectedInputOfImpl, MappableInputOfImpl } from "../../mapper";
export declare type UnsafeDiscriminatedUnionMapper<DiscriminantK extends string, ArrT extends readonly SafeMapper<{
    [k in DiscriminantK]: unknown;
}>[]> = (SafeMapper<OutputOf<ArrT[number]>> & ExpectedInput<ExpectedInputOfImpl<ArrT[number]>[0]> & MappableInput<MappableInputOfImpl<ArrT[number]>[0]>);
export declare function unsafeDiscriminatedUnion<DiscriminantK extends string, ArrT extends readonly SafeMapper<{
    [k in DiscriminantK]: unknown;
}>[]>(discriminantK: DiscriminantK, ...arr: ArrT): (UnsafeDiscriminatedUnionMapper<DiscriminantK, ArrT>);
export declare type DiscriminatedUnionMapper<DiscriminantK extends string, F extends SafeMapper<{
    [k in DiscriminantK]: unknown;
}>, ArrT extends readonly SafeMapper<{
    [k in DiscriminantK]: unknown;
}>[]> = (SafeMapper<OutputOf<F | ArrT[number]>> & ExpectedInput<ExpectedInputOfImpl<F | ArrT[number]>[0]> & MappableInput<MappableInputOfImpl<F | ArrT[number]>[0]>);
export declare function discriminatedUnion<DiscriminantK extends string, F extends SafeMapper<{
    [k in DiscriminantK]: unknown;
}>, ArrT extends readonly SafeMapper<{
    [k in DiscriminantK]: unknown;
}>[]>(discriminantK: DiscriminantK, f: F, ...arr: ArrT): (DiscriminatedUnionMapper<DiscriminantK, F, ArrT>);
//# sourceMappingURL=discriminated-union.d.ts.map