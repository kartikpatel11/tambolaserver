"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_util_1 = require("../type-util");
function method() {
    var mappers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        mappers[_i] = arguments[_i];
    }
    var result = function (target, propertyKey, descriptor) {
        if (mappers.length == 0) {
            //Nothing to validate.
            return;
        }
        var propertyName = (typeof propertyKey == "string") ?
            propertyKey :
            "Symbol(" + propertyKey.toString() + ")";
        var ctorName = type_util_1.getCtorName(target.constructor);
        var fullName = ctorName + "." + propertyName;
        var originalMethod = descriptor.value;
        if (!(originalMethod instanceof Function)) {
            throw new Error("Method " + fullName + " not found");
        }
        descriptor.value = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var max = Math.max(args.length, originalMethod.length);
            for (var i = 0; i < max; ++i) {
                var mapper = (i < mappers.length) ?
                    mappers[i] :
                    //Probably a rest parameter
                    mappers[mappers.length - 1];
                if (i < args.length) {
                    args[i] = mapper(fullName + "(#" + i + ")", args[i]);
                }
                else {
                    args.push(mapper(fullName + "(#" + i + ")", undefined));
                }
            }
            if (originalMethod != undefined) {
                return originalMethod.apply(this, args);
            }
            else {
                return undefined;
            }
        });
    };
    return result;
}
exports.method = method;
/*
class Clazz {
    @method(() => 1, () => "")
    foo (arg0 : number, arg1 : string) {
    }
    //Rest params are a bit iffy
    @method(() => 1, ...[() => ""])
    foo2 (arg0 : number, ...arg1 : string[]) {
    }

    @setter()
    get x () {
        return 5;
    }

    @setter(() => 1, () => "")
    set name (v : string) {
        console.log(v);
    }
}
type wtf = ExtractKeyWithParams<Clazz, [() => 1]>
type c_name = Clazz["name"]
const c = new Clazz();
type p = Parameters<(arg0 : number, ...args : string[]) => void>
type p0 = p[0];
type p1 = p[1];
type p2 = p[2];
type l = p["length"];
//*/ 
//# sourceMappingURL=method.js.map