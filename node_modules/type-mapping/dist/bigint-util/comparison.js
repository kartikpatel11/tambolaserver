"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_util_1 = require("../type-util");
var jsbi_1 = require("./jsbi");
/**
    Assumes BigInt.toString() is implemented correctly.

    Assummes we won't get strings like,

    + "-0000"
    + "-qwerty"
    + "123.123"
*/
function compare(a, b) {
    if (type_util_1.isBigIntNativelySupported()) {
        return ((typeof a == "number" && isNaN(a)) ?
            NaN :
            (typeof b == "number" && isNaN(b)) ?
                NaN :
                a < b ?
                    -1 :
                    a > b ?
                        1 :
                        0);
    }
    if (typeof a == "number") {
        if (typeof b == "number") {
            return a - b;
        }
        else {
            var cmp = jsbi_1.JSBI.__compareToNumber(jsbi_1.JSBI.BigInt(b.toString()), a);
            return -cmp;
        }
    }
    else {
        if (typeof b == "number") {
            var cmp = jsbi_1.JSBI.__compareToNumber(jsbi_1.JSBI.BigInt(a.toString()), b);
            return cmp;
        }
        else {
            return jsbi_1.JSBI.__compareToBigInt(jsbi_1.JSBI.BigInt(a.toString()), jsbi_1.JSBI.BigInt(b.toString()));
        }
    }
}
exports.compare = compare;
function lessThan(a, b) {
    return compare(a, b) < 0;
}
exports.lessThan = lessThan;
function greaterThan(a, b) {
    return compare(a, b) > 0;
}
exports.greaterThan = greaterThan;
function equal(a, b) {
    return compare(a, b) == 0;
}
exports.equal = equal;
function lessThanOrEqual(a, b) {
    return compare(a, b) <= 0;
}
exports.lessThanOrEqual = lessThanOrEqual;
function greaterThanOrEqual(a, b) {
    return compare(a, b) >= 0;
}
exports.greaterThanOrEqual = greaterThanOrEqual;
function subOneImpl(str) {
    if (str[0] == "-") {
        var result = addOneImpl(str.substr(1));
        return "-" + result;
    }
    if (str == "0") {
        return "-1";
    }
    var digits = str
        .split("")
        .map(function (s) { return parseInt(s); });
    for (var i = digits.length - 1; i >= 0; --i) {
        var d = digits[i];
        if (d == 0) {
            digits[i] = 9;
        }
        else {
            if (i == 0 && digits[i] == 1) {
                digits.shift();
            }
            else {
                digits[i] = d - 1;
            }
            break;
        }
    }
    if (digits.length == 0) {
        return "0";
    }
    else {
        return digits.join("");
    }
}
exports.subOneImpl = subOneImpl;
function addOneImpl(str) {
    jsbi_1.JSBI.__absoluteAddOne;
    if (str[0] == "-") {
        var result = subOneImpl(str.substr(1));
        if (result == "0") {
            return result;
        }
        else {
            return "-" + result;
        }
    }
    var digits = str
        .split("")
        .map(function (s) { return parseInt(s); });
    var carry = true;
    for (var i = digits.length - 1; i >= 0; --i) {
        var d = digits[i];
        if (d == 9) {
            digits[i] = 0;
        }
        else {
            digits[i] = d + 1;
            carry = false;
            break;
        }
    }
    if (carry) {
        digits.unshift(1);
    }
    return digits.join("");
}
exports.addOneImpl = addOneImpl;
//# sourceMappingURL=comparison.js.map