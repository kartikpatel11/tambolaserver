import { RequestValueHandler, ErrorValueHandler, ValueHandler } from "./value-handler";
import { RouteData } from "../route";
import { RequestVoidHandler, ErrorVoidHandler } from "../void-handler";
export declare type RouteDataOf<HandlerT extends ValueHandler<RouteData, any>> = (HandlerT extends RequestValueHandler<infer DataT, any> ? DataT : HandlerT extends ErrorValueHandler<infer DataT, any> ? DataT : never);
export declare type NextLocalsOf<HandlerT extends ValueHandler<any, any>> = (HandlerT extends RequestValueHandler<any, infer NextLocalsT> ? NextLocalsT : HandlerT extends ErrorValueHandler<any, infer NextLocalsT> ? NextLocalsT : never);
export declare function toSafeRequestVoidHandler<HandlerT extends RequestValueHandler<any, any>>(handler: HandlerT): RequestVoidHandler<RouteDataOf<HandlerT>>;
export declare function toSafeErrorVoidHandler<HandlerT extends ErrorValueHandler<any, any>>(handler: HandlerT): ErrorVoidHandler<RouteDataOf<HandlerT>>;
//# sourceMappingURL=util.d.ts.map