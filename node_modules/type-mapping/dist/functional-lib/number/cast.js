"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = require("../string");
var operator_1 = require("../operator");
var number_1 = require("./number");
var bigint_1 = require("../bigint/bigint");
/**
    Uses `floatingPointFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    stringToFiniteNumber("", s).toString()
    ```
*/
function stringToFiniteNumber() {
    return operator_1.cast(string_1.floatingPointFormatString(), parseFloat, number_1.finiteNumber());
}
exports.stringToFiniteNumber = stringToFiniteNumber;
/**
    Uses `integerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    stringToInteger("", s).toString()
    ```
*/
function stringToInteger() {
    return operator_1.cast(string_1.integerFormatString(), parseFloat, number_1.integer());
}
exports.stringToInteger = stringToInteger;
/**
    Uses `unsignedIntegerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    stringToUnsignedInteger("", s).toString()
    ```
*/
function stringToUnsignedInteger() {
    return operator_1.cast(string_1.unsignedIntegerFormatString(), parseFloat, number_1.unsignedInteger());
}
exports.stringToUnsignedInteger = stringToUnsignedInteger;
/**
    Uses `floatingPointFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toFiniteNumber("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toFiniteNumber("", b).toString()
    ```
*/
function toFiniteNumber() {
    return operator_1.cast(operator_1.or(string_1.floatingPointFormatString(), operator_1.pipe(bigint_1.bigInt(), function (_name, b) {
        return b.toString();
    })), parseFloat, number_1.finiteNumber());
}
exports.toFiniteNumber = toFiniteNumber;
/**
    Uses `floatingPointFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toUnsafeNumber("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toUnsafeNumber("", b).toString()
    ```
*/
function toUnsafeNumber() {
    return operator_1.cast(operator_1.or(string_1.floatingPointFormatString(), operator_1.pipe(bigint_1.bigInt(), function (_name, b) {
        return b.toString();
    })), parseFloat, number_1.unsafeNumber());
}
exports.toUnsafeNumber = toUnsafeNumber;
/**
    Uses `integerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toInteger("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toInteger("", b).toString()
    ```
*/
function toInteger() {
    return operator_1.cast(operator_1.or(string_1.integerFormatString(), operator_1.pipe(bigint_1.bigInt(), function (_name, b) {
        return b.toString();
    })), parseFloat, number_1.integer());
}
exports.toInteger = toInteger;
/**
    Uses `unsignedIntegerFormatString()` and `parseFloat()` internally.

    ```ts
    const s = "999999999999999999999999999"
    //Output is "1e+27" due to loss in precision
    toUnsignedInteger("", s).toString()
    ```

    -----

    ```ts
    const b = BigInt("999999999999999999999999999")
    //Output is "1e+27" due to loss in precision
    toUnsignedInteger("", b).toString()
    ```
*/
function toUnsignedInteger() {
    return operator_1.cast(operator_1.or(string_1.unsignedIntegerFormatString(), operator_1.pipe(bigint_1.bigInt(), function (_name, b) {
        return b.toString();
    })), parseFloat, number_1.unsignedInteger());
}
exports.toUnsignedInteger = toUnsignedInteger;
//# sourceMappingURL=cast.js.map