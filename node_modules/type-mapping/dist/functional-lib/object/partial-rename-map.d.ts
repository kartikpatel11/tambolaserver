import { FieldMap, ExtractLiteralDstName } from "../../field-map";
import { SafeMapper, ExpectedInput, OutputOf, ExpectedInputOf, MappableInputOf, MappableInput, MergedOutputOf, Name } from "../../mapper";
export declare type PartialRenameMapMapper<MapT extends FieldMap> = (SafeMapper<{
    [dst in ExtractLiteralDstName<MapT>]: (MergedOutputOf<Extract<MapT[Extract<keyof MapT, string>], Name<dst>>> | undefined);
} & (string extends MapT[Extract<keyof MapT, string>]["__name"] ? {
    [name: string]: (OutputOf<Exclude<MapT[Extract<keyof MapT, string>], Name<ExtractLiteralDstName<MapT>>>> | undefined);
} : unknown)> & ExpectedInput<{
    [dst in ExtractLiteralDstName<MapT>]?: (ExpectedInputOf<Extract<MapT[Extract<keyof MapT, string>], Name<dst>>> | undefined);
} & (string extends MapT[Extract<keyof MapT, string>]["__name"] ? {
    [name: string]: (ExpectedInputOf<Exclude<MapT[Extract<keyof MapT, string>], Name<ExtractLiteralDstName<MapT>>>> | undefined);
} : unknown)> & MappableInput<{
    [src in Extract<keyof MapT, string>]?: (MappableInputOf<MapT[src]> | undefined);
} | ({
    [dst in ExtractLiteralDstName<MapT>]?: (MappableInputOf<Extract<MapT[Extract<keyof MapT, string>], Name<dst>>> | undefined);
} & (string extends MapT[Extract<keyof MapT, string>]["__name"] ? {
    [name: string]: (MappableInputOf<Exclude<MapT[Extract<keyof MapT, string>], Name<ExtractLiteralDstName<MapT>>>> | undefined);
} : unknown))>);
export declare function partialRenameMap<MapT extends FieldMap>(map: MapT): (PartialRenameMapMapper<MapT>);
//# sourceMappingURL=partial-rename-map.d.ts.map