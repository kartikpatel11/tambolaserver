"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("./mapper");
var functional_lib_1 = require("./functional-lib");
var type_util_1 = require("./type-util");
function fluentMapper(f) {
    var result = function (name, mixed) {
        return f(name, mixed);
    };
    result.__optional = mapper_1.getOptionalFlagOrFalse(f);
    //== mapper/debug ==
    result._debugIsExpectedInput = function (_x) {
    };
    result._debugIsHandledInput = function (_x) {
    };
    result._debugIsMappableInput = function (_x) {
    };
    result._debugIsOutput = function (_x) {
    };
    //== mapper/operation ==
    result.map = function (name, mixed) {
        return mapper_1.map(f, name, mixed);
    };
    result.mapExpected = function (name, mixed) {
        return mapper_1.mapExpected(f, name, mixed);
    };
    result.mapMappable = function (name, mixed) {
        return mapper_1.mapMappable(f, name, mixed);
    };
    result.mapHandled = function (name, mixed) {
        return mapper_1.mapHandled(f, name, mixed);
    };
    result.tryMap = function (name, mixed) {
        return mapper_1.tryMap(f, name, mixed);
    };
    result.tryMapExpected = function (name, mixed) {
        return mapper_1.tryMapExpected(f, name, mixed);
    };
    result.tryMapMappable = function (name, mixed) {
        return mapper_1.tryMapMappable(f, name, mixed);
    };
    result.tryMapHandled = function (name, mixed) {
        return mapper_1.tryMapHandled(f, name, mixed);
    };
    result.expectMappableInput = function () {
        return fluentMapper(mapper_1.expectMappableInput(f));
    };
    result.withExpectedInput = function () {
        return fluentMapper(mapper_1.withExpectedInput(f)());
    };
    result.withMapper = function (newMapper) {
        return fluentMapper(mapper_1.withMapper(f, newMapper));
    };
    result.withName = function (name) {
        return fluentMapper(mapper_1.withName(f, name));
    };
    //== array ==
    result.array = function () {
        return fluentMapper(functional_lib_1.array(f));
    };
    result.readOnlyArray = function () {
        return fluentMapper(functional_lib_1.readOnlyArray(f));
    };
    result.arrayLikeToArray = function () {
        return fluentMapper(functional_lib_1.arrayLikeToArray(f));
    };
    result.arrayLikeToReadOnlyArray = function () {
        return fluentMapper(functional_lib_1.arrayLikeToReadOnlyArray(f));
    };
    //== array-like ==
    result.arrayLike = function () {
        return fluentMapper(functional_lib_1.arrayLike(f));
    };
    // == object
    result.derive = function (srcKey, dstKey) {
        return fluentMapper(functional_lib_1.derive(srcKey, dstKey, f));
    };
    result.rename = function (srcKey, dstKey) {
        return fluentMapper(functional_lib_1.rename(srcKey, dstKey, f));
    };
    result.unsafeStringIndexer = function () {
        return fluentMapper(functional_lib_1.unsafeStringIndexer(f));
    };
    result.stringIndexer = function () {
        return fluentMapper(functional_lib_1.stringIndexer(f));
    };
    //== operator ==
    result.cast = function (castDelegate, dstDelegate) {
        return fluentMapper(functional_lib_1.cast(f, castDelegate, dstDelegate));
    };
    result.deepMerge = function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        var result = functional_lib_1.deepMerge.apply(void 0, [f].concat(arr));
        return fluentMapper(result);
    };
    result.excludeLiteral = function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        return fluentMapper(functional_lib_1.excludeLiteral.apply(void 0, [f].concat(arr)));
    };
    result.orUndefined = function () {
        return fluentMapper(functional_lib_1.orUndefined(f));
    };
    result.orNull = function () {
        return fluentMapper(functional_lib_1.orNull(f));
    };
    result.orMaybe = function () {
        return fluentMapper(functional_lib_1.orMaybe(f));
    };
    result.notUndefined = function () {
        return fluentMapper(functional_lib_1.notUndefined(f));
    };
    result.notNull = function () {
        return fluentMapper(functional_lib_1.notNull(f));
    };
    result.notMaybe = function () {
        return fluentMapper(functional_lib_1.notMaybe(f));
    };
    result.optional = function () {
        return fluentMapper(functional_lib_1.optional(f));
    };
    result.notOptional = function () {
        return fluentMapper(functional_lib_1.notOptional(f));
    };
    result.or = function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        return fluentMapper(functional_lib_1.or.apply(void 0, [f].concat(arr)));
    };
    result.pipe = (function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        return fluentMapper(functional_lib_1.unsafePipe.apply(void 0, [f].concat(arr)));
    });
    result.unsafePipe = function () {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arr[_i] = arguments[_i];
        }
        return fluentMapper(functional_lib_1.unsafePipe.apply(void 0, [f].concat(arr)));
    };
    //== type ==
    result.setImplementation = function (impl) {
        f.setImplementation(impl);
    };
    //const rt : FluentMapper<AnySafeMapper> = result;
    return type_util_1.setFunctionName(result, mapper_1.getNameOrEmptyString(f));
}
exports.fluentMapper = fluentMapper;
/*
import {stringToUnsignedInteger, inclusiveRange} from "./functional-lib";
const n = stringToUnsignedInteger();
const x = fluentMapper(n);
x.__optional
x.__expectedInput
x.__mappableInput
const y = x
    .pipe(
        inclusiveRange({
            min : 3.141,
            max : 6.282,
        })
    )
    .derive("x", "y");
const opt = x.optional()
    .withName("qwerty");
//const x2 = x.withExpectedInput<any>();
//*/ 
//# sourceMappingURL=fluent-mapper.js.map