"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("../path");
var operation_1 = require("./operation");
var query_1 = require("./query");
var predicate_1 = require("./predicate");
/**
    TODO Does the "CONNECT" method make sense?
*/
var Method;
(function (Method) {
    Method["GET"] = "GET";
    Method["POST"] = "POST";
    Method["PUT"] = "PUT";
    Method["DELETE"] = "DELETE";
    Method["PATCH"] = "PATCH";
    Method["HEAD"] = "HEAD";
    Method["OPTIONS"] = "OPTIONS";
    Method["CONNECT"] = "CONNECT";
    /**
        If a route's method is "Contextual",
        then it is "GET" if there is no body mapper,
        and "POST" if there is.
    */
    Method["Contextual"] = "Contextual";
})(Method = exports.Method || (exports.Method = {}));
;
var Route = /** @class */ (function () {
    function Route(data) {
        this.method = data.method;
        this.path = data.path;
        this.param = data.param;
        this.query = data.query;
        this.body = data.body;
        this.header = data.header;
        this.response = data.response;
    }
    Route.prototype.setMethod = function (method) {
        return operation_1.setMethod(this, method);
    };
    Route.prototype.getMethod = function () {
        return query_1.getMethod(this);
    };
    Route.Create = function () {
        return new Route({
            method: Method.Contextual,
            path: path_1.Path.Create(),
            param: undefined,
            query: undefined,
            body: undefined,
            header: undefined,
            response: undefined,
        });
    };
    Route.prototype.append = function (part) {
        return operation_1.append(this, part);
    };
    Route.prototype.appendParam = function (nameOrField, regex) {
        if (typeof nameOrField == "string") {
            return operation_1.appendParam(this, nameOrField, regex);
        }
        else {
            return operation_1.appendParamField(this, nameOrField, regex);
        }
    };
    Route.prototype.setParam = function (f) {
        return operation_1.setParam(this, f);
    };
    Route.prototype.unsetParam = function () {
        return operation_1.unsetParam(this);
    };
    /**
        Your query mapper should handle the following types,
        `string|(string[])|undefined`
    */
    Route.prototype.setQuery = function (f) {
        return operation_1.setQuery(this, f);
    };
    Route.prototype.setBody = function (f) {
        return operation_1.setBody(this, f);
    };
    /**
        Your header mapper should handle the following types,
        `string|(string[])|undefined`

        Your header key will probably be lowercased.
    */
    Route.prototype.setHeader = function (f) {
        return operation_1.setHeader(this, f);
    };
    Route.prototype.setResponse = function (f) {
        return operation_1.setResponse(this, f);
    };
    Route.prototype.deepMergeQuery = function (f) {
        return operation_1.deepMergeQuery(this, f);
    };
    Route.prototype.isValid = function () {
        return predicate_1.isValid(this);
    };
    Route.prototype.assertValid = function () {
        predicate_1.assertValid(this);
    };
    return Route;
}());
exports.Route = Route;
/**
    Synonym for `Route.Create()`
*/
function route() {
    return Route.Create();
}
exports.route = route;
//# sourceMappingURL=route.js.map