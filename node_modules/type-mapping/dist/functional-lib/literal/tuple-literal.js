"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type_util_1 = require("../../type-util");
var array_1 = require("../array");
var operator_1 = require("../operator");
var error_util_1 = require("../../error-util");
var array_like_1 = require("../array-like");
var string_util_1 = require("../../string-util");
/**
 * Returns a mapper that checks if incoming data matches the tuple `TupleT`.
 *
 * ```ts
 * tupleLiteral("a", "b")("x", ["a", "b"]);       //OK!
 * tupleLiteral("a", "b")("x", ["a", "b", "c"]);  //Error
 * tupleLiteral("a", "b")("x", ["a"]);            //Error
 * tupleLiteral("a", "b")("x", ["b", "a"]);       //Error
 * ```
 *
 * @param tuple The tuple incoming data must equal to
 */
function tupleLiteral() {
    var tuple = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tuple[_i] = arguments[_i];
    }
    var lengthDelegate = array_like_1.length({
        min: tuple.length,
        max: tuple.length,
    });
    return operator_1.pipe(array_1.instanceOfArray(), function (name, mixed) {
        lengthDelegate(name, mixed);
        for (var i = 0; i < tuple.length; ++i) {
            if (!type_util_1.strictEqual(mixed[i], tuple[i])) {
                throw error_util_1.makeMappingError({
                    message: "" + name + string_util_1.toPropertyAccess(i) + " must be " + type_util_1.toLiteralStr(tuple[i]) + "; received " + type_util_1.toTypeStr(mixed[i]),
                    inputName: "" + name + string_util_1.toPropertyAccess(i),
                    actualValue: mixed[i],
                    expected: type_util_1.toLiteralStr(tuple[i]),
                    expectedMeta: {
                        mappableValues: [
                            tuple.slice()
                        ],
                        outputValues: [
                            tuple.slice()
                        ],
                    },
                });
            }
        }
        return mixed;
    });
}
exports.tupleLiteral = tupleLiteral;
//# sourceMappingURL=tuple-literal.js.map