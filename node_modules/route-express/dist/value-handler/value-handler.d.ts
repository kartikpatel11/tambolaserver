import { RouteData } from "../route";
import { Request } from "../request";
import { Response } from "../response";
import { ValueNextFunction } from "./value-next-function";
import { Locals } from "../locals";
export interface RequestValueHandler<DataT extends RouteData, NextLocalsT extends Locals> {
    (req: Request<DataT["request"]>, res: Response<DataT["response"]>, next: ValueNextFunction<NextLocalsT>): void;
}
export interface ErrorValueHandler<DataT extends RouteData, NextLocalsT extends Locals> {
    (err: any, req: Request<DataT["request"]>, res: Response<DataT["response"]>, next: ValueNextFunction<NextLocalsT>): void;
}
export declare type ValueHandler<DataT extends RouteData, NextLocalsT extends Locals> = (RequestValueHandler<DataT, NextLocalsT> | ErrorValueHandler<DataT, NextLocalsT>);
export interface __RequestValueHandler<DataT extends RouteData, NextLocalsT extends Locals, ReturnT extends void | undefined> {
    (req: Request<DataT["request"]>, res: Response<DataT["response"]>, next: ValueNextFunction<NextLocalsT>): ReturnT;
}
export interface __ErrorValueHandler<DataT extends RouteData, NextLocalsT extends Locals, ReturnT extends void | undefined> {
    (err: any, req: Request<DataT["request"]>, res: Response<DataT["response"]>, next: ValueNextFunction<NextLocalsT>): ReturnT;
}
//# sourceMappingURL=value-handler.d.ts.map