"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var is_bigint_1 = require("./is-bigint");
var is_primitive_1 = require("./is-primitive");
/**
    Intended to work better than `String(mixed)`.
*/
function toLiteralStr(mixed) {
    //We do not mind === here.
    if (mixed === null) {
        return "null";
        //We do not mind === here.
    }
    else if (mixed === undefined) {
        return "undefined";
    }
    else if (is_bigint_1.isBigInt(typeof mixed)) {
        return mixed.toString() + "n";
    }
    else if (typeof mixed == "string") {
        return JSON.stringify(mixed);
    }
    else {
        return String(mixed);
    }
}
exports.toLiteralStr = toLiteralStr;
function toLiteralUnionStr(arr) {
    return arr
        .map(toLiteralStr)
        .join("|");
}
exports.toLiteralUnionStr = toLiteralUnionStr;
function getCtorName(ctor) {
    if (!(ctor instanceof Object)) {
        return "[Not Ctor]";
    }
    var name = ctor.name;
    if (typeof name == "string") {
        return name;
    }
    return "[Unknown Name]";
}
exports.getCtorName = getCtorName;
/**
    Intended to work better than `typeof mixed`.
*/
function toTypeStr(mixed) {
    //We do not mind === here.
    if (mixed === null) {
        return "null";
    }
    //We do not mind === here.
    if (mixed === undefined) {
        return "undefined";
    }
    var str = (typeof mixed);
    if (str !== "object") {
        return str;
    }
    if (is_bigint_1.isBigInt(mixed)) {
        return "bigint";
    }
    var prototype = Object.getPrototypeOf(mixed);
    if (prototype == undefined) {
        return "[Unknown Type]";
    }
    var constructor = prototype.constructor;
    if (constructor == undefined) {
        return "[Unknown Prototype]";
    }
    return getCtorName(constructor);
}
exports.toTypeStr = toTypeStr;
function toLiteralOrTypeStr(mixed) {
    if (is_primitive_1.isLiteral(mixed)) {
        return toLiteralStr(mixed);
    }
    else {
        return toTypeStr(mixed);
    }
}
exports.toLiteralOrTypeStr = toLiteralOrTypeStr;
function toLiteralOrTypeUnionStr(arr) {
    return arr
        .map(toLiteralOrTypeStr)
        .join("|");
}
exports.toLiteralOrTypeUnionStr = toLiteralOrTypeUnionStr;
//# sourceMappingURL=to-type-str.js.map