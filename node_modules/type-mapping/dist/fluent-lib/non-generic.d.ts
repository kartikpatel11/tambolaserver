import * as m from "../functional-lib";
import { FluentMapper } from "../fluent-mapper";
declare const fluentExport: {
    string: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    boolean: () => FluentMapper<import("../mapper").Mapper<unknown, boolean>>;
    undefined: () => FluentMapper<import("../mapper").Mapper<unknown, undefined>>;
    object: (map: import("..").SafeMapperMap) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    match: (regex: RegExp, errorDelegate?: m.MatchMapperErrorDelegate | undefined) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    toLowerCase: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    toUpperCase: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    length: (args: {
        min?: number | undefined;
        max?: number | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, {
        readonly length: number;
    }>>;
    null: () => FluentMapper<import("../mapper").Mapper<unknown, null>>;
    never: () => FluentMapper<import("../mapper").Mapper<unknown, never>>;
    integer: () => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    array: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any[]> & import("../mapper").ExpectedInput<any[]> & import("../mapper").MappableInput<any[]>>;
    unsafeAny: () => FluentMapper<import("../mapper").Mapper<unknown, any>>;
    arrayLikeToArray: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any[]> & import("../mapper").ExpectedInput<any[]> & import("../mapper").MappableInput<ArrayLike<any>>>;
    arrayLikeToReadOnlyArray: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, readonly any[]> & import("../mapper").ExpectedInput<readonly any[]> & import("../mapper").MappableInput<ArrayLike<any>>>;
    readOnlyArray: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, readonly any[]> & import("../mapper").ExpectedInput<readonly any[]> & import("../mapper").MappableInput<readonly any[]>>;
    instanceOfArray: () => FluentMapper<import("../mapper").Mapper<unknown, any[]>>;
    instanceOfReadOnlyArray: () => FluentMapper<import("../mapper").Mapper<unknown, readonly any[]>>;
    arrayLike: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, ArrayLike<any>> & import("../mapper").ExpectedInput<ArrayLike<any>> & import("../mapper").MappableInput<ArrayLike<any>>>;
    implementsArrayLike: () => FluentMapper<import("../mapper").Mapper<unknown, ArrayLike<unknown>>>;
    bigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    unsignedBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    stringToBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint> & import("../mapper").ExpectedInput<bigint> & import("../mapper").MappableInput<string | bigint>>;
    stringToUnsignedBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint> & import("../mapper").ExpectedInput<bigint> & import("../mapper").MappableInput<string | bigint>>;
    integerToBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint> & import("../mapper").ExpectedInput<bigint> & import("../mapper").MappableInput<number | bigint>>;
    unsignedIntegerToUnsignedBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint> & import("../mapper").ExpectedInput<bigint> & import("../mapper").MappableInput<number | bigint>>;
    toBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint> & import("../mapper").ExpectedInput<bigint> & import("../mapper").MappableInput<string | number | bigint>>;
    toUnsignedBigInt: () => FluentMapper<import("../mapper").Mapper<unknown, bigint> & import("../mapper").ExpectedInput<bigint> & import("../mapper").MappableInput<string | number | bigint>>;
    bigIntGt: (x: bigint) => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    bigIntLt: (x: bigint) => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    bigIntGtEq: (x: bigint) => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    bigIntLtEq: (x: bigint) => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    bigIntRange: (args: {
        gt?: bigint | undefined;
        lt?: bigint | undefined;
        gtEq?: bigint | undefined;
        ltEq?: bigint | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, bigint>>;
    finiteNumberToBoolean: () => FluentMapper<import("../mapper").Mapper<unknown, boolean> & import("../mapper").ExpectedInput<boolean> & import("../mapper").MappableInput<number | boolean>>;
    stringToBoolean: () => FluentMapper<import("../mapper").Mapper<unknown, boolean> & import("../mapper").ExpectedInput<boolean> & import("../mapper").MappableInput<string | boolean>>;
    finiteNumberToTrue: () => FluentMapper<import("../mapper").Mapper<unknown, true> & import("../mapper").ExpectedInput<true> & import("../mapper").MappableInput<number | boolean>>;
    finiteNumberToFalse: () => FluentMapper<import("../mapper").Mapper<unknown, false> & import("../mapper").ExpectedInput<false> & import("../mapper").MappableInput<number | boolean>>;
    stringToTrue: () => FluentMapper<import("../mapper").Mapper<unknown, true> & import("../mapper").ExpectedInput<true> & import("../mapper").MappableInput<string | boolean>>;
    stringToFalse: () => FluentMapper<import("../mapper").Mapper<unknown, false> & import("../mapper").ExpectedInput<false> & import("../mapper").MappableInput<string | boolean>>;
    toBoolean: () => FluentMapper<import("../mapper").Mapper<unknown, boolean> & import("../mapper").ExpectedInput<boolean> & import("../mapper").MappableInput<string | number | boolean>>;
    toTrue: () => FluentMapper<import("../mapper").Mapper<unknown, true> & import("../mapper").ExpectedInput<true> & import("../mapper").MappableInput<string | number | boolean>>;
    toFalse: () => FluentMapper<import("../mapper").Mapper<unknown, false> & import("../mapper").ExpectedInput<false> & import("../mapper").MappableInput<string | number | boolean>>;
    instanceOfBuffer: () => FluentMapper<import("../mapper").Mapper<unknown, Buffer>>;
    bufferLength: (args: {
        min?: number | undefined;
        max?: number | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, Buffer>>;
    bufferExactLength: (length: number) => FluentMapper<import("../mapper").Mapper<unknown, Buffer>>;
    unsafeStringToDate: () => FluentMapper<import("../mapper").Mapper<unknown, Date> & import("../mapper").ExpectedInput<Date> & import("../mapper").MappableInput<string | Date>>;
    dateToString: (dateParser: (str: string) => Date) => FluentMapper<import("../mapper").Mapper<unknown, Date> & import("../mapper").ExpectedInput<Date> & import("../mapper").MappableInput<string | Date>>;
    unixTimestampSecondsToDate: () => FluentMapper<import("../mapper").Mapper<unknown, Date> & import("../mapper").ExpectedInput<Date> & import("../mapper").MappableInput<number | Date>>;
    unixTimestampMillisecondsToDate: () => FluentMapper<import("../mapper").Mapper<unknown, Date> & import("../mapper").ExpectedInput<Date> & import("../mapper").MappableInput<number | Date>>;
    dateToUnixTimestampSeconds: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<number | Date>>;
    dateToUnixTimestampMilliseconds: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<number | Date>>;
    instanceOfDate: () => FluentMapper<import("../mapper").Mapper<unknown, Date>>;
    toEnumValue: (e: typeof import("../enum-util").Enum) => FluentMapper<import("../mapper").Mapper<unknown, string> & import("../mapper").ExpectedInput<string> & import("../mapper").MappableInput<string>>;
    toEnumKey: (e: typeof import("../enum-util").Enum) => FluentMapper<any>;
    toOneEnumValue: (...args: never) => FluentMapper<import("../mapper").Mapper<unknown, unknown> & import("../mapper").ExpectedInput<unknown> & import("../mapper").MappableInput<unknown>>;
    toOneEnumKey: (...args: never) => FluentMapper<import("../mapper").Mapper<unknown, string> & import("../mapper").ExpectedInput<string> & import("../mapper").MappableInput<unknown>>;
    enumKey: (e: typeof import("../enum-util").Enum) => FluentMapper<any>;
    enumValue: (e: typeof import("../enum-util").Enum) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    stringToJsonObject: () => FluentMapper<import("../mapper").Mapper<unknown, {
        [k: string]: unknown;
    }> & import("../mapper").ExpectedInput<{
        [k: string]: unknown;
    }> & import("../mapper").MappableInput<string | {
        [k: string]: unknown;
    }>>;
    jsonObject: () => FluentMapper<import("../mapper").Mapper<unknown, {
        [k: string]: unknown;
    }>>;
    unsafeLiteral: (...args: (string | number | bigint | boolean | null | undefined)[]) => FluentMapper<import("../mapper").Mapper<unknown, string | number | bigint | boolean | null | undefined>>;
    literal: (arg0: string | number | bigint | boolean | null | undefined, ...arr: (string | number | bigint | boolean | null | undefined)[]) => FluentMapper<import("../mapper").Mapper<unknown, string | number | bigint | boolean | null | undefined>>;
    tupleLiteral: (...args: never) => FluentMapper<import("../mapper").Mapper<unknown, readonly (string | number | bigint | boolean | null | undefined)[]>>;
    nonMaybe: () => FluentMapper<import("../mapper").Mapper<unknown, m.NonMaybe>>;
    undefinedToNull: () => FluentMapper<import("../mapper").Mapper<unknown, null> & import("../mapper").ExpectedInput<null> & import("../mapper").MappableInput<null | undefined>>;
    emptyStringToNull: () => FluentMapper<import("../mapper").Mapper<unknown, null> & import("../mapper").ExpectedInput<null> & import("../mapper").MappableInput<"" | null>>;
    whitespaceStringToNull: () => FluentMapper<import("../mapper").Mapper<unknown, null> & import("../mapper").ExpectedInput<null> & import("../mapper").MappableInput<string | null>>;
    stringToFiniteNumber: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number>>;
    stringToInteger: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number>>;
    stringToUnsignedInteger: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number>>;
    toFiniteNumber: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number | bigint>>;
    toUnsafeNumber: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number | bigint>>;
    toInteger: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number | bigint>>;
    toUnsignedInteger: () => FluentMapper<import("../mapper").Mapper<unknown, number> & import("../mapper").ExpectedInput<number> & import("../mapper").MappableInput<string | number | bigint>>;
    gt: (x: number) => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    lt: (x: number) => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    gtEq: (x: number) => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    ltEq: (x: number) => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    range: (args: {
        gt?: number | undefined;
        lt?: number | undefined;
        gtEq?: number | undefined;
        ltEq?: number | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    unsafeNumber: () => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    finiteNumber: () => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    unsignedInteger: () => FluentMapper<import("../mapper").Mapper<unknown, number>>;
    deriveMap: (map: import("..").FieldMap) => FluentMapper<import("../mapper").Mapper<unknown, {} & {
        [name: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    derive: (srcKey: string, dstKey: string, f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    toEmptyObject: () => FluentMapper<import("../mapper").Mapper<unknown, {}>>;
    instanceOfObject: () => FluentMapper<import("../mapper").Mapper<unknown, Object>>;
    instanceOf: (ctor: new (...args: any[]) => unknown) => FluentMapper<import("../mapper").Mapper<unknown, unknown>>;
    objectFromArray: (...args: (import("../mapper").Mapper<unknown, any> & import("../mapper").Name<string>)[]) => FluentMapper<import("../mapper").Mapper<unknown, {} & {
        [name: string]: any;
    }> & import("../mapper").ExpectedInput<{} & {} & {
        [name: string]: any;
    }> & import("../mapper").MappableInput<{} & {} & {
        [name: string]: any;
    }>>;
    objectFromMap: (map: import("..").SafeMapperMap) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    partialDeriveMap: (map: import("..").FieldMap) => FluentMapper<import("../mapper").Mapper<unknown, {} & {
        [name: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    partialObjectFromArray: (...args: (import("../mapper").Mapper<unknown, any> & import("../mapper").Name<string>)[]) => FluentMapper<import("../mapper").Mapper<unknown, {} & {
        [name: string]: any;
    }> & import("../mapper").ExpectedInput<{} & {
        [name: string]: any;
    }> & import("../mapper").MappableInput<{} & {
        [name: string]: any;
    }>>;
    partialObjectFromMap: (map: import("..").SafeMapperMap) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    partialObject: (map: import("..").SafeMapperMap) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    }>>;
    partialRenameMap: (map: import("..").FieldMap) => FluentMapper<import("../mapper").Mapper<unknown, {} & {
        [name: string]: any;
    }> & import("../mapper").ExpectedInput<{} & {
        [name: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    } | ({} & {
        [name: string]: any;
    })>>;
    pojo: () => FluentMapper<import("../mapper").Mapper<unknown, {
        [k: string]: unknown;
    }>>;
    renameMap: (map: import("..").FieldMap) => FluentMapper<import("../mapper").Mapper<unknown, {} & {
        [name: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [name: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    } | {
        [name: string]: any;
    }>>;
    rename: (srcKey: string, dstKey: string, f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: any;
    }> & import("../mapper").MappableInput<{
        [x: string]: any;
    } | {
        [x: string]: any;
    }>>;
    unsafeStringIndexer: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, {
        [k: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [k: string]: any;
    }> & import("../mapper").MappableInput<{
        [k: string]: any;
    }>>;
    stringIndexer: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, {
        [k: string]: any;
    }> & import("../mapper").ExpectedInput<{
        [k: string]: any;
    }> & import("../mapper").MappableInput<{
        [k: string]: any;
    }>>;
    cache: (cached: unknown, f: (name: string, mixed: any, args_0: any) => any) => FluentMapper<import("../mapper").Mapper<any, any>>;
    cast: (srcMapper: import("../mapper").Mapper<unknown, any>, castDelegate: m.CastDelegate<any, any>, dstMapper: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    unsafeDeepMerge: (...args: import("../mapper").Mapper<unknown, any>[]) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    deepMerge: (f: import("../mapper").Mapper<unknown, any>, ...arr: import("../mapper").Mapper<unknown, any>[]) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    unsafeDiscriminatedUnion: (discriminantK: string, ...arr: import("../mapper").Mapper<unknown, {
        [x: string]: unknown;
    }>[]) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: unknown;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: unknown;
    }> & import("../mapper").MappableInput<{
        [x: string]: unknown;
    }>>;
    discriminatedUnion: (discriminantK: string, f: import("../mapper").Mapper<unknown, {
        [x: string]: unknown;
    }>, ...arr: import("../mapper").Mapper<unknown, {
        [x: string]: unknown;
    }>[]) => FluentMapper<import("../mapper").Mapper<unknown, {
        [x: string]: unknown;
    } | {
        [x: string]: unknown;
    }> & import("../mapper").ExpectedInput<{
        [x: string]: unknown;
    } | {
        [x: string]: unknown;
    }> & import("../mapper").MappableInput<{
        [x: string]: unknown;
    } | {
        [x: string]: unknown;
    }>>;
    excludeLiteral: (f: import("../mapper").Mapper<unknown, any>, ...arr: (string | number | bigint | boolean | null | undefined)[]) => FluentMapper<import("../mapper").Mapper<unknown, any>>;
    orUndefined: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    orNull: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    orMaybe: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    notUndefined: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    notNull: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    notMaybe: (assert: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    optional: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any> & import("../mapper").Optional>;
    notOptional: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    runTimeRequired: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any> & import("../mapper").RunTimeRequired>;
    notRunTimeRequired: (f: import("../mapper").Mapper<unknown, any>) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    unsafeOr: (...args: import("../mapper").Mapper<unknown, any>[]) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    or: (f: import("../mapper").Mapper<unknown, any>, ...arr: import("../mapper").Mapper<unknown, any>[]) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    pipe: (...args: never) => FluentMapper<import("../mapper").Mapper<unknown, any> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    unsafePipe: (f: import("../mapper").Mapper<unknown, any>, ...arr: import("../mapper").Mapper<any, any>[]) => FluentMapper<import("../mapper").Mapper<unknown, unknown> & import("../mapper").ExpectedInput<any> & import("../mapper").MappableInput<any>>;
    reallyUnsafePipe: (...args: import("../mapper").Mapper<any, any>[]) => FluentMapper<import("../mapper").Mapper<unknown, unknown>>;
    finiteNumberToFiniteNumberString: () => FluentMapper<import("../mapper").Mapper<unknown, string> & import("../mapper").ExpectedInput<string> & import("../mapper").MappableInput<string | number>>;
    integerToIntegerString: () => FluentMapper<import("../mapper").Mapper<unknown, string> & import("../mapper").ExpectedInput<string> & import("../mapper").MappableInput<string | number>>;
    unsignedIntegerToUnsignedIntegerString: () => FluentMapper<import("../mapper").Mapper<unknown, string> & import("../mapper").ExpectedInput<string> & import("../mapper").MappableInput<string | number>>;
    jsonObjectToJsonObjectString: () => FluentMapper<import("../mapper").Mapper<unknown, string> & import("../mapper").ExpectedInput<string> & import("../mapper").MappableInput<string | {
        [k: string]: unknown;
    }>>;
    ipAddressString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    ipV4MappedIpV6String: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    ipV4OctetString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    ipV4String: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    ipV6SegmentString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    ipV6StringWithMaxSegmentCount: (maxSegmentCount: number) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    ipV6String: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    floatingPointFormatString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    integerFormatString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    unsignedIntegerFormatString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    finiteNumberString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    integerString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    unsignedIntegerString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    jsonObjectString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    stringLength: (args: {
        min?: number | undefined;
        max?: number | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    stringExactLength: (length: number) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    notMatch: (regex: RegExp, errorDelegate?: m.MatchMapperErrorDelegate | undefined) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    email: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    emailAddress: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    hexadecimalString: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    padLeft: (minLength: number, char: string) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    padRight: (minLength: number, char: string) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    subStringBlacklist: (blacklist: string[], configuration?: {
        caseInsensitive?: boolean | undefined;
    } | undefined) => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    toTrimmed: () => FluentMapper<import("../mapper").Mapper<unknown, string>>;
    deferred: () => FluentMapper<m.DeferredMapper<unknown>>;
    byteLength: (args: {
        min?: number | undefined;
        max?: number | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, {
        readonly byteLength: number;
    }>>;
    instanceOfUint8Array: () => FluentMapper<import("../mapper").Mapper<unknown, Uint8Array>>;
    uint8ArrayLength: (args: {
        min?: number | undefined;
        max?: number | undefined;
    }) => FluentMapper<import("../mapper").Mapper<unknown, Uint8Array>>;
    uint8ArrayExactLength: (length: number) => FluentMapper<import("../mapper").Mapper<unknown, Uint8Array>>;
    nullToUndefined: () => FluentMapper<import("../mapper").Mapper<unknown, undefined> & import("../mapper").ExpectedInput<undefined> & import("../mapper").MappableInput<null | undefined>>;
    emptyStringToUndefined: () => FluentMapper<import("../mapper").Mapper<unknown, undefined> & import("../mapper").ExpectedInput<undefined> & import("../mapper").MappableInput<"" | undefined>>;
    whitespaceStringToUndefined: () => FluentMapper<import("../mapper").Mapper<unknown, undefined> & import("../mapper").ExpectedInput<undefined> & import("../mapper").MappableInput<string | undefined>>;
    unknown: () => FluentMapper<import("../mapper").Mapper<unknown, unknown>>;
};
export = fluentExport;
//# sourceMappingURL=non-generic.d.ts.map