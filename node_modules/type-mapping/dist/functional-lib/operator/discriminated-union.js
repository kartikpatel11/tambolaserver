"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mapper_1 = require("../../mapper");
var error_util_1 = require("../../error-util");
var operator_1 = require("../operator");
var string_util_1 = require("../../string-util");
function unsafeDiscriminatedUnion(discriminantK) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    if (arr.length == 0) {
        throw new Error("Cannot call unsafeDiscriminatedUnion() on zero mappers");
    }
    var orDelegate = operator_1.unsafeOr.apply(void 0, arr);
    var result = function (name, mixed) {
        var mapResult = mapper_1.tryMapHandled(orDelegate, name, mixed);
        if (mapResult.success) {
            return mapResult.value;
        }
        else {
            var unionErrors = mapResult.mappingError.unionErrors;
            if (unionErrors == undefined) {
                throw mapResult.mappingError;
            }
            var discriminantInputName_1 = "" + name + string_util_1.toPropertyAccess(discriminantK);
            var discriminantErrors = unionErrors
                .map(function (unionError) {
                return error_util_1.tryGetPropertyError(unionError, discriminantInputName_1);
            })
                .filter(function (propertyError) {
                return propertyError != undefined;
            });
            if (discriminantErrors.length != unionErrors.length) {
                var nonDiscriminantErrors = unionErrors
                    .map(function (unionError) {
                    return (error_util_1.tryGetPropertyError(unionError, discriminantInputName_1) == undefined) ?
                        //This error is not because of the discriminant
                        unionError :
                        undefined;
                })
                    .filter(function (unionError) {
                    return unionError != undefined;
                });
                throw error_util_1.makeNormalizedUnionError(name, mixed, nonDiscriminantErrors);
            }
            var expectedDiscriminators = discriminantErrors.map(function (err) { return err.expected; }).join("|");
            throw error_util_1.makeMappingError({
                message: name + " must be object with " + expectedDiscriminators + " property " + JSON.stringify(discriminantK),
                inputName: name,
                actualValue: mixed,
                expected: "object with " + expectedDiscriminators + " property " + JSON.stringify(discriminantK),
                expectedMeta: undefined,
                propertyErrors: [
                    error_util_1.makeNormalizedUnionError(discriminantInputName_1, (mixed == undefined ?
                        undefined :
                        mixed[discriminantK]), discriminantErrors),
                ],
            });
        }
    };
    return result;
}
exports.unsafeDiscriminatedUnion = unsafeDiscriminatedUnion;
function discriminatedUnion(discriminantK, f) {
    var arr = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        arr[_i - 2] = arguments[_i];
    }
    return unsafeDiscriminatedUnion.apply(void 0, [discriminantK,
        f].concat(arr));
}
exports.discriminatedUnion = discriminatedUnion;
//# sourceMappingURL=discriminated-union.js.map