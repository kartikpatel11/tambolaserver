"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var m = require("../functional-lib");
var fluent_mapper_1 = require("../fluent-mapper");
function arrayLike(f) {
    return fluent_mapper_1.fluentMapper(m.arrayLike(f));
}
exports.arrayLike = arrayLike;
function arrayLikeToArray(f) {
    return fluent_mapper_1.fluentMapper(m.arrayLikeToArray(f));
}
exports.arrayLikeToArray = arrayLikeToArray;
function arrayLikeToReadOnlyArray(f) {
    return fluent_mapper_1.fluentMapper(m.arrayLikeToReadOnlyArray(f));
}
exports.arrayLikeToReadOnlyArray = arrayLikeToReadOnlyArray;
function array(f) {
    return fluent_mapper_1.fluentMapper(m.array(f));
}
exports.array = array;
function readOnlyArray(f) {
    return fluent_mapper_1.fluentMapper(m.readOnlyArray(f));
}
exports.readOnlyArray = readOnlyArray;
function castEnumFlyweight(e) {
    var src = m.castEnumFlyweight(e);
    var result = {
        toValue: {},
        toKey: {},
    };
    for (var k in src.toValue) {
        if (!src.toValue.hasOwnProperty(k)) {
            continue;
        }
        result.toValue[k] = fluent_mapper_1.fluentMapper(src.toValue[k]);
    }
    for (var k in src.toKey) {
        if (!src.toKey.hasOwnProperty(k)) {
            continue;
        }
        result.toKey[k] = fluent_mapper_1.fluentMapper(src.toKey[k]);
    }
    return result;
}
exports.castEnumFlyweight = castEnumFlyweight;
function toEnumValue(e) {
    return fluent_mapper_1.fluentMapper(m.toEnumValue(e));
}
exports.toEnumValue = toEnumValue;
function toEnumKey(e) {
    return fluent_mapper_1.fluentMapper(m.toEnumKey(e));
}
exports.toEnumKey = toEnumKey;
function toOneEnumValue(e, k) {
    return fluent_mapper_1.fluentMapper(m.toOneEnumValue(e, k));
}
exports.toOneEnumValue = toOneEnumValue;
function toOneEnumKey(e, k) {
    return fluent_mapper_1.fluentMapper(m.toOneEnumKey(e, k));
}
exports.toOneEnumKey = toOneEnumKey;
function enumKey(e) {
    return fluent_mapper_1.fluentMapper(m.enumKey(e));
}
exports.enumKey = enumKey;
function enumValue(e) {
    return fluent_mapper_1.fluentMapper(m.enumValue(e));
}
exports.enumValue = enumValue;
function unsafeLiteral() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.unsafeLiteral.apply(m, arr));
}
exports.unsafeLiteral = unsafeLiteral;
function literal(arg0) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.literal.apply(m, [arg0].concat(arr)));
}
exports.literal = literal;
function tupleLiteral() {
    var tuple = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tuple[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.tupleLiteral.apply(m, tuple));
}
exports.tupleLiteral = tupleLiteral;
function deriveMap(map) {
    return fluent_mapper_1.fluentMapper(m.deriveMap(map));
}
exports.deriveMap = deriveMap;
function derive(srcKey, dstKey, f) {
    return fluent_mapper_1.fluentMapper(m.derive(srcKey, dstKey, f));
}
exports.derive = derive;
function instanceOf(ctor) {
    return fluent_mapper_1.fluentMapper(m.instanceOf(ctor));
}
exports.instanceOf = instanceOf;
function objectFromArray() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.objectFromArray.apply(m, arr));
}
exports.objectFromArray = objectFromArray;
function objectFromMap(map) {
    return fluent_mapper_1.fluentMapper(m.objectFromMap(map));
}
exports.objectFromMap = objectFromMap;
exports.object = function () {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.object.apply(m, arr));
};
function partialDeriveMap(map) {
    return fluent_mapper_1.fluentMapper(m.partialDeriveMap(map));
}
exports.partialDeriveMap = partialDeriveMap;
function partialObjectFromArray() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.partialObjectFromArray.apply(m, arr));
}
exports.partialObjectFromArray = partialObjectFromArray;
function partialObjectFromMap(map) {
    return fluent_mapper_1.fluentMapper(m.partialObjectFromMap(map));
}
exports.partialObjectFromMap = partialObjectFromMap;
exports.partialObject = function () {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.partialObject.apply(m, arr));
};
function partialRenameMap(map) {
    return fluent_mapper_1.fluentMapper(m.partialRenameMap(map));
}
exports.partialRenameMap = partialRenameMap;
function renameMap(map) {
    return fluent_mapper_1.fluentMapper(m.renameMap(map));
}
exports.renameMap = renameMap;
function rename(srcKey, dstKey, f) {
    return fluent_mapper_1.fluentMapper(m.rename(srcKey, dstKey, f));
}
exports.rename = rename;
function unsafeStringIndexer(f) {
    return fluent_mapper_1.fluentMapper(m.unsafeStringIndexer(f));
}
exports.unsafeStringIndexer = unsafeStringIndexer;
function stringIndexer(f) {
    return fluent_mapper_1.fluentMapper(m.stringIndexer(f));
}
exports.stringIndexer = stringIndexer;
function cache(cached, f) {
    return fluent_mapper_1.fluentMapper(m.cache(cached, f));
}
exports.cache = cache;
function cast(srcDelegate, castDelegate, dstDelegate) {
    return fluent_mapper_1.fluentMapper(m.cast(srcDelegate, castDelegate, dstDelegate));
}
exports.cast = cast;
function unsafeDeepMerge() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.unsafeDeepMerge.apply(m, arr));
}
exports.unsafeDeepMerge = unsafeDeepMerge;
function deepMerge(f) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.deepMerge.apply(m, [f].concat(arr)));
}
exports.deepMerge = deepMerge;
function unsafeDiscriminatedUnion(discriminantK) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.unsafeDiscriminatedUnion.apply(m, [discriminantK].concat(arr)));
}
exports.unsafeDiscriminatedUnion = unsafeDiscriminatedUnion;
function discriminatedUnion(discriminantK, f) {
    var arr = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        arr[_i - 2] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.discriminatedUnion.apply(m, [discriminantK, f].concat(arr)));
}
exports.discriminatedUnion = discriminatedUnion;
function excludeLiteral(f) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.excludeLiteral.apply(m, [f].concat(arr)));
}
exports.excludeLiteral = excludeLiteral;
function orUndefined(f) {
    return fluent_mapper_1.fluentMapper(m.orUndefined(f));
}
exports.orUndefined = orUndefined;
function orNull(f) {
    return fluent_mapper_1.fluentMapper(m.orNull(f));
}
exports.orNull = orNull;
function orMaybe(f) {
    return fluent_mapper_1.fluentMapper(m.orMaybe(f));
}
exports.orMaybe = orMaybe;
function notUndefined(f) {
    return fluent_mapper_1.fluentMapper(m.notUndefined(f));
}
exports.notUndefined = notUndefined;
function notNull(f) {
    return fluent_mapper_1.fluentMapper(m.notNull(f));
}
exports.notNull = notNull;
function notMaybe(f) {
    return fluent_mapper_1.fluentMapper(m.notMaybe(f));
}
exports.notMaybe = notMaybe;
function optional(f) {
    return fluent_mapper_1.fluentMapper(m.optional(f));
}
exports.optional = optional;
function notOptional(f) {
    return fluent_mapper_1.fluentMapper(m.notOptional(f));
}
exports.notOptional = notOptional;
function unsafeOr() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.unsafeOr.apply(m, arr));
}
exports.unsafeOr = unsafeOr;
function or(f) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.or.apply(m, [f].concat(arr)));
}
exports.or = or;
exports.pipe = function () {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.reallyUnsafePipe.apply(m, arr));
};
function unsafePipe(f) {
    var arr = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        arr[_i - 1] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.unsafePipe.apply(m, [f].concat(arr)));
}
exports.unsafePipe = unsafePipe;
function reallyUnsafePipe() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
    }
    return fluent_mapper_1.fluentMapper(m.reallyUnsafePipe.apply(m, arr));
}
exports.reallyUnsafePipe = reallyUnsafePipe;
function deferred() {
    return fluent_mapper_1.fluentMapper(m.deferred());
}
exports.deferred = deferred;
//# sourceMappingURL=generic.js.map