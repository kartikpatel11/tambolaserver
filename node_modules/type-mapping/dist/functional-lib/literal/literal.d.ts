import { SafeMapper } from "../../mapper";
import { LiteralType } from "../../primitive";
export declare type UnsafeLiteralMapper<ArrT extends LiteralType[]> = (SafeMapper<ArrT[number]>);
/**
 * Returns a mapper that validates if the input is an element of `arr`
 *
 * This function throws an error if `arr.length == 0`
 *
 * @param arr
 *  @see {@link LiteralType}
 */
export declare function unsafeLiteral<ArrT extends LiteralType[]>(...arr: ArrT): (UnsafeLiteralMapper<ArrT>);
export declare type LiteralMapper<Arg0 extends LiteralType, ArrT extends LiteralType[]> = (SafeMapper<Arg0 | ArrT[number]>);
/**
 * Returns a mapper that validates if the input is one of the arguments
 *
 * @param arg0
 * @param arr
 *  @see {@link LiteralType}
 */
export declare function literal<Arg0 extends LiteralType, ArrT extends LiteralType[]>(arg0: Arg0, ...arr: ArrT): (LiteralMapper<Arg0, ArrT>);
//# sourceMappingURL=literal.d.ts.map